(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/forms'), require('rxjs/Observable'), require('rxjs/Subject'), require('@angular/common'), require('@angular/http'), require('@angular/material')) :
    typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/forms', 'rxjs/Observable', 'rxjs/Subject', '@angular/common', '@angular/http', '@angular/material'], factory) :
    (factory((global.td = global.td || {}, global.td.fileUpload = global.td.fileUpload || {}),global.ng.core,global.ng.forms,global.Rx,global.Rx,global.ng.common,global.ng.http,global.ng.material));
}(this, (function (exports,_angular_core,_angular_forms,rxjs_Observable,rxjs_Subject,_angular_common,_angular_http,_angular_material) { 'use strict';

var __decorate = (window && window.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (window && window.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var TdFileUploadComponent = (function () {
    function TdFileUploadComponent() {
        this._multiple = false;
        this._disabled = false;
        /**
         * defaultColor?: string
         * Sets browse button color. Uses same color palette accepted as [mdButton] and defaults to 'primary'.
         */
        this.defaultColor = 'primary';
        /**
         * activeColor?: string
         * Sets upload button color. Uses same color palette accepted as [mdButton] and defaults to 'accent'.
         */
        this.activeColor = 'accent';
        /**
         * cancelColor?: string
         * Sets cancel button color. Uses same color palette accepted as [mdButton] and defaults to 'warn'.
         */
        this.cancelColor = 'warn';
        /**
         * upload?: function
         * Event emitted when upload button is clicked.
         * Emits a [File | FileList] object.
         */
        this.onUpload = new _angular_core.EventEmitter();
    }
    Object.defineProperty(TdFileUploadComponent.prototype, "multiple", {
        get: function () {
            return this._multiple;
        },
        /**
         * multiple?: boolean
         * Sets if multiple files can be dropped/selected at once in [TdFileUploadComponent].
         */
        set: function (multiple) {
            this._multiple = multiple !== '' ? (multiple === 'true' || multiple === true) : true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TdFileUploadComponent.prototype, "disabled", {
        get: function () {
            return this._disabled;
        },
        /**
         * disabled?: boolean
         * Disables [TdFileUploadComponent] and clears selected/dropped files.
         */
        set: function (disabled) {
            if (disabled) {
                this.cancel();
            }
            this._disabled = disabled;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Method executed when upload button is clicked.
     */
    TdFileUploadComponent.prototype.uploadPressed = function () {
        if (this.files) {
            this.onUpload.emit(this.files);
        }
    };
    /**
     * Methods executed when cancel button is clicked.
     * Clears files.
     */
    TdFileUploadComponent.prototype.cancel = function () {
        this.files = undefined;
    };
    __decorate([
        _angular_core.Input('defaultColor'), 
        __metadata('design:type', String)
    ], TdFileUploadComponent.prototype, "defaultColor", void 0);
    __decorate([
        _angular_core.Input('activeColor'), 
        __metadata('design:type', String)
    ], TdFileUploadComponent.prototype, "activeColor", void 0);
    __decorate([
        _angular_core.Input('cancelColor'), 
        __metadata('design:type', String)
    ], TdFileUploadComponent.prototype, "cancelColor", void 0);
    __decorate([
        _angular_core.Input('multiple'), 
        __metadata('design:type', Object), 
        __metadata('design:paramtypes', [Object])
    ], TdFileUploadComponent.prototype, "multiple", null);
    __decorate([
        _angular_core.Input('accept'), 
        __metadata('design:type', String)
    ], TdFileUploadComponent.prototype, "accept", void 0);
    __decorate([
        _angular_core.Input('disabled'), 
        __metadata('design:type', Boolean), 
        __metadata('design:paramtypes', [Boolean])
    ], TdFileUploadComponent.prototype, "disabled", null);
    __decorate([
        _angular_core.Output('upload'), 
        __metadata('design:type', _angular_core.EventEmitter)
    ], TdFileUploadComponent.prototype, "onUpload", void 0);
    TdFileUploadComponent = __decorate([
        _angular_core.Component({
            changeDetection: _angular_core.ChangeDetectionStrategy.OnPush,
            selector: 'td-file-upload',
            styles: ["/** * A collection of mixins and CSS classes that can be used to apply elevation to a material * element. * See: https://www.google.com/design/spec/what-is-material/elevation-shadows.html * Examples: * * * .md-foo { *   @include $md-elevation(2); * *   &:active { *     @include $md-elevation(8); *   } * } * * <div id=\"external-card\" class=\"md-elevation-z2\"><p>Some content</p></div> * * For an explanation of the design behind how elevation is implemented, see the design doc at * https://goo.gl/Kq0k9Z. */ /** * The css property used for elevation. In most cases this should not be changed. It is exposed * as a variable for abstraction / easy use when needing to reference the property directly, for * example in a will-change rule. */ /** The default duration value for elevation transitions. */ /** The default easing value for elevation transitions. */ /** * Applies the correct css rules to an element to give it the elevation specified by $zValue. * The $zValue must be between 0 and 24. */ /** * Returns a string that can be used as the value for a transition property for elevation. * Calling this function directly is useful in situations where a component needs to transition * more than one property. * * .foo { *   transition: md-elevation-transition-property-value(), opacity 100ms ease; *   will-change: $md-elevation-property, opacity; * } */ /** * Applies the correct css rules needed to have an element transition between elevations. * This mixin should be applied to elements whose elevation values will change depending on their * context (e.g. when active or disabled). */ button { padding-left: 0; padding-right: 0; } button label { cursor: pointer; display: block; height: 100%; padding-left: 8px; padding-right: 8px; } button label md-icon { position: relative; top: 6px; padding-right: 5px; } input.md-file-upload-input { display: none; } .td-file-cancel { height: 24px; width: 24px; position: relative; top: 24px; left: -12px; } .td-file-cancel md-icon { background-color: white; border-radius: 12px; } /** * Class that is added ondragenter by the [TdFileDrop] directive. */ .drop-zone { border-radius: 3px; transition: background 0.4s cubic-bezier(0.25, 0.8, 0.25, 1), box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1); box-shadow: 0px 5px 5px -3px rgba(0, 0, 0, 0.2), 0px 8px 10px 1px rgba(0, 0, 0, 0.14), 0px 3px 14px 2px rgba(0, 0, 0, 0.12); } .drop-zone * { pointer-events: none; } "],
            template: "<div> <div *ngIf=\"!files\"> <button md-raised-button [color]=\"defaultColor\"  [multiple]=\"multiple\"  [disabled]=\"disabled\" (keyup.enter)=\"fileBrowse.click()\" (click)=\"fileBrowse.click()\" (fileDrop)=\"files = $event\" tdFileDrop>  <label>    <md-icon>attachment</md-icon>Choose a File... </label> </button> <input #fileBrowse  class=\"md-file-upload-input\"  type=\"file\" [attr.accept]=\"accept\"                 [(ngModel)]=\"files\" [multiple]=\"multiple\"  [disabled]=\"disabled\" tdFileSelect> </div> <div *ngIf=\"files\" layout=\"row\"> <button #fileUpload  md-raised-button [color]=\"activeColor\" (keyup.delete)=\"cancel()\" (keyup.backspace)=\"cancel()\" (keyup.escape)=\"cancel()\" (click)=\"uploadPressed()\"> <label>    <md-icon>file_upload</md-icon> {{ files.name || files.length }} <span *ngIf=\"files.length\">files selected</span>  </label> </button> <button md-icon-button class=\"td-file-cancel\" [color]=\"cancelColor\"             (click)=\"cancel()\"> <md-icon>cancel</md-icon> </button> </div> </div>",
        }), 
        __metadata('design:paramtypes', [])
    ], TdFileUploadComponent);
    return TdFileUploadComponent;
}());

var __decorate$1 = (window && window.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$1 = (window && window.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (window && window.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var TdFileSelectDirective = (function () {
    function TdFileSelectDirective(model) {
        this.model = model;
        this._multiple = false;
        /**
         * fileSelect?: function
         * Event emitted when a file or files are selected in host [HTMLInputElement].
         * Emits a [FileList | File] object.
         * Alternative to not use [(ngModel)].
         */
        this.onFileSelect = new _angular_core.EventEmitter();
    }
    Object.defineProperty(TdFileSelectDirective.prototype, "multiple", {
        /**
         * multiple?: boolean
         * Sets whether multiple files can be selected at once in host element, or just a single file.
         * Can also be 'multiple' native attribute.
         */
        set: function (multiple) {
            this._multiple = multiple !== '' ? (multiple === 'true' || multiple === true) : true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TdFileSelectDirective.prototype, "multipleBinding", {
        /**
         * Binds native 'multiple' attribute if [multiple] property is 'true'.
         */
        get: function () {
            return this._multiple ? '' : undefined;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Listens to 'change' host event to get [HTMLInputElement] files.
     * Emits the 'onFileSelect' event with a [FileList] or [File] depending if 'multiple' attr exists in host.
     * Uses [(ngModel)] if declared, instead of emitting 'onFileSelect' event.
     */
    TdFileSelectDirective.prototype.onChange = function (event) {
        if (event.target instanceof HTMLInputElement) {
            var fileInputEl = event.target;
            var files = fileInputEl.files;
            if (files.length) {
                var value = this._multiple ? (files.length > 1 ? files : files[0]) : files[0];
                this.model ? this.model.update.emit(value) : this.onFileSelect.emit(value);
            }
        }
    };
    __decorate$1([
        _angular_core.Input('multiple'), 
        __metadata$1('design:type', Object), 
        __metadata$1('design:paramtypes', [Object])
    ], TdFileSelectDirective.prototype, "multiple", null);
    __decorate$1([
        _angular_core.Output('fileSelect'), 
        __metadata$1('design:type', _angular_core.EventEmitter)
    ], TdFileSelectDirective.prototype, "onFileSelect", void 0);
    __decorate$1([
        _angular_core.HostBinding('attr.multiple'), 
        __metadata$1('design:type', String)
    ], TdFileSelectDirective.prototype, "multipleBinding", null);
    __decorate$1([
        _angular_core.HostListener('change', ['$event']), 
        __metadata$1('design:type', Function), 
        __metadata$1('design:paramtypes', [Event]), 
        __metadata$1('design:returntype', void 0)
    ], TdFileSelectDirective.prototype, "onChange", null);
    TdFileSelectDirective = __decorate$1([
        _angular_core.Directive({
            selector: '[tdFileSelect]',
        }),
        __param(0, _angular_core.Optional()),
        __param(0, _angular_core.Host()), 
        __metadata$1('design:paramtypes', [_angular_forms.NgModel])
    ], TdFileSelectDirective);
    return TdFileSelectDirective;
}());

var __decorate$2 = (window && window.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$2 = (window && window.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var TdFileDropDirective = (function () {
    function TdFileDropDirective(_renderer, _element) {
        this._renderer = _renderer;
        this._element = _element;
        this._multiple = false;
        this._disabled = false;
        /**
         * fileDrop?: function
         * Event emitted when a file or files are dropped in host element after being validated.
         * Emits a [FileList | File] object.
         */
        this.onFileDrop = new _angular_core.EventEmitter();
    }
    Object.defineProperty(TdFileDropDirective.prototype, "multiple", {
        /**
         * multiple?: boolean
         * Sets whether multiple files can be dropped at once in host element, or just a single file.
         * Can also be 'multiple' native attribute.
         */
        set: function (multiple) {
            this._multiple = multiple !== '' ? (multiple === 'true' || multiple === true) : true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TdFileDropDirective.prototype, "disabled", {
        /**
         * disabled?: boolean
         * Disabled drop events for host element.
         */
        set: function (disabled) {
            this._disabled = disabled;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TdFileDropDirective.prototype, "multipleBinding", {
        /**
         * Binds native 'multiple' attribute if [multiple] property is 'true'.
         */
        get: function () {
            return this._multiple ? '' : undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TdFileDropDirective.prototype, "disabledBinding", {
        /**
         * Binds native 'disabled' attribute if [disabled] property is 'true'.
         */
        get: function () {
            return this._disabled ? '' : undefined;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Listens to 'drop' host event to get validated transfer items.
     * Emits the 'onFileDrop' event with a [FileList] or [File] depending if 'multiple' attr exists in host.
     * Stops event propagation and default action from browser for 'drop' event.
     */
    TdFileDropDirective.prototype.onDrop = function (event) {
        var transfer = event.dataTransfer;
        var files = transfer.files;
        if (files.length) {
            var value = this._multiple ? (files.length > 1 ? files : files[0]) : files[0];
            this.onFileDrop.emit(value);
        }
        this._stopEvent(event);
    };
    /**
     * Listens to 'dragover' host event to validate transfer items.
     * Checks if 'multiple' attr exists in host to allow multiple file drops.
     * Stops event propagation and default action from browser for 'dragover' event.
     */
    TdFileDropDirective.prototype.onDragOver = function (event) {
        var transfer = event.dataTransfer;
        transfer.dropEffect = this._typeCheck(transfer.types);
        if (this._disabled || (!this._multiple &&
            ((transfer.items && transfer.items.length > 1) || transfer.mozItemCount > 1))) {
            transfer.dropEffect = 'none';
        }
        else {
            transfer.dropEffect = 'copy';
        }
        this._stopEvent(event);
    };
    /**
     * Listens to 'dragenter' host event to add animation class 'drop-zone' which can be overriden in host.
     * Stops event propagation and default action from browser for 'dragenter' event.
     */
    TdFileDropDirective.prototype.onDragEnter = function (event) {
        if (event.target === this._element.nativeElement && !this._disabled) {
            this._renderer.setElementClass(this._element.nativeElement, 'drop-zone', true);
        }
        this._stopEvent(event);
    };
    /**
     * Listens to 'dragleave' host event to remove animation class 'drop-zone'.
     * Stops event propagation and default action from browser for 'dragleave' event.
     */
    TdFileDropDirective.prototype.onDragLeave = function (event) {
        if (event.target === this._element.nativeElement && !this._disabled) {
            this._renderer.setElementClass(this._element.nativeElement, 'drop-zone', false);
        }
        this._stopEvent(event);
    };
    /**
     * Validates if the transfer item types are 'Files'.
     */
    TdFileDropDirective.prototype._typeCheck = function (types) {
        var dropEffect = 'none';
        if (types) {
            if ((types.contains && types.contains('Files'))
                || (types.indexOf && types.indexOf('Files') !== -1)) {
                dropEffect = 'copy';
            }
        }
        return dropEffect;
    };
    TdFileDropDirective.prototype._stopEvent = function (event) {
        event.preventDefault();
        event.stopPropagation();
    };
    __decorate$2([
        _angular_core.Input('multiple'), 
        __metadata$2('design:type', Object), 
        __metadata$2('design:paramtypes', [Object])
    ], TdFileDropDirective.prototype, "multiple", null);
    __decorate$2([
        _angular_core.Input('disabled'), 
        __metadata$2('design:type', Boolean), 
        __metadata$2('design:paramtypes', [Boolean])
    ], TdFileDropDirective.prototype, "disabled", null);
    __decorate$2([
        _angular_core.Output('fileDrop'), 
        __metadata$2('design:type', _angular_core.EventEmitter)
    ], TdFileDropDirective.prototype, "onFileDrop", void 0);
    __decorate$2([
        _angular_core.HostBinding('attr.multiple'), 
        __metadata$2('design:type', String)
    ], TdFileDropDirective.prototype, "multipleBinding", null);
    __decorate$2([
        _angular_core.HostBinding('attr.disabled'), 
        __metadata$2('design:type', String)
    ], TdFileDropDirective.prototype, "disabledBinding", null);
    __decorate$2([
        _angular_core.HostListener('drop', ['$event']), 
        __metadata$2('design:type', Function), 
        __metadata$2('design:paramtypes', [Event]), 
        __metadata$2('design:returntype', void 0)
    ], TdFileDropDirective.prototype, "onDrop", null);
    __decorate$2([
        _angular_core.HostListener('dragover', ['$event']), 
        __metadata$2('design:type', Function), 
        __metadata$2('design:paramtypes', [Event]), 
        __metadata$2('design:returntype', void 0)
    ], TdFileDropDirective.prototype, "onDragOver", null);
    __decorate$2([
        _angular_core.HostListener('dragenter', ['$event']), 
        __metadata$2('design:type', Function), 
        __metadata$2('design:paramtypes', [Event]), 
        __metadata$2('design:returntype', void 0)
    ], TdFileDropDirective.prototype, "onDragEnter", null);
    __decorate$2([
        _angular_core.HostListener('dragleave', ['$event']), 
        __metadata$2('design:type', Function), 
        __metadata$2('design:paramtypes', [Event]), 
        __metadata$2('design:returntype', void 0)
    ], TdFileDropDirective.prototype, "onDragLeave", null);
    TdFileDropDirective = __decorate$2([
        _angular_core.Directive({
            selector: '[tdFileDrop]',
        }), 
        __metadata$2('design:paramtypes', [_angular_core.Renderer, _angular_core.ElementRef])
    ], TdFileDropDirective);
    return TdFileDropDirective;
}());

var __decorate$3 = (window && window.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$3 = (window && window.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var TdFileService = (function () {
    function TdFileService() {
        this._progressSubject = new rxjs_Subject.Subject();
        this._progressObservable = this._progressSubject.asObservable();
    }
    Object.defineProperty(TdFileService.prototype, "progress", {
        /**
         * Gets progress observable to keep track of the files being uploaded.
         * Needs to be supported by backend.
         */
        get: function () {
            return this._progressObservable;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * params:
     * - options: IUploadOptions {
     *     url: string,
     *     method: 'post' | 'put',
     *     file: File,
     *     headers?: {[key: string]: string}
     * }
     *
     * Uses underlying [XMLHttpRequest] to upload a file to a url.
     * Will be depricated when angular2 fixes [Http] to allow [FormData] as body.
     */
    TdFileService.prototype.upload = function (options) {
        var _this = this;
        return new rxjs_Observable.Observable(function (subscriber) {
            var xhr = new XMLHttpRequest();
            var formData = new FormData();
            formData.append('file', options.file);
            xhr.onprogress = function (event) {
                var progress = 0;
                if (event.total > 0) {
                    progress = Math.round(event.loaded / event.total * 100);
                }
                _this._progressSubject.next(progress);
            };
            xhr.onreadystatechange = function () {
                if (xhr.readyState === 4) {
                    if (xhr.status === 200 || xhr.status === 201) {
                        subscriber.next(JSON.parse(xhr.response));
                        subscriber.complete();
                    }
                    else {
                        subscriber.error(xhr.response);
                    }
                }
            };
            xhr.open(options.method, options.url, true);
            xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
            if (options.headers) {
                for (var key in options.headers) {
                    xhr.setRequestHeader(key, options.headers[key]);
                }
            }
            xhr.send(formData);
        });
    };
    TdFileService = __decorate$3([
        _angular_core.Injectable(), 
        __metadata$3('design:paramtypes', [])
    ], TdFileService);
    return TdFileService;
}());

var __decorate$4 = (window && window.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$4 = (window && window.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var TD_FILE_DIRECTIVES = [
    TdFileSelectDirective,
    TdFileDropDirective,
    TdFileUploadComponent,
];
var CovalentFileModule = (function () {
    function CovalentFileModule() {
    }
    CovalentFileModule.forRoot = function () {
        return {
            ngModule: CovalentFileModule,
            providers: [TdFileService],
        };
    };
    CovalentFileModule = __decorate$4([
        _angular_core.NgModule({
            imports: [
                _angular_http.HttpModule,
                _angular_http.JsonpModule,
                _angular_forms.FormsModule,
                _angular_common.CommonModule,
                _angular_material.MaterialModule.forRoot(),
            ],
            declarations: [
                TD_FILE_DIRECTIVES,
            ],
            exports: [
                TD_FILE_DIRECTIVES,
            ],
        }), 
        __metadata$4('design:paramtypes', [])
    ], CovalentFileModule);
    return CovalentFileModule;
}());

exports.TdFileUploadComponent = TdFileUploadComponent;
exports.TdFileSelectDirective = TdFileSelectDirective;
exports.TdFileDropDirective = TdFileDropDirective;
exports.TdFileService = TdFileService;
exports.CovalentFileModule = CovalentFileModule;

Object.defineProperty(exports, '__esModule', { value: true });

})));
