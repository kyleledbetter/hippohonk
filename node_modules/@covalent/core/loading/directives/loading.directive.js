var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Directive, Input } from '@angular/core';
import { ViewContainerRef, TemplateRef } from '@angular/core';
import { LoadingType, LoadingMode } from '../loading.component';
import { TdLoadingService } from '../services/loading.service';
export var TdLoadingDirective = (function () {
    function TdLoadingDirective(_viewContainer, _templateRef, _loadingService) {
        this._viewContainer = _viewContainer;
        this._templateRef = _templateRef;
        this._loadingService = _loadingService;
    }
    Object.defineProperty(TdLoadingDirective.prototype, "name", {
        /**
         * tdLoading?: string
         * Name reference of the loading mask, used to register/resolve requests to the mask.
         */
        set: function (name) {
            this._name = name;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TdLoadingDirective.prototype, "type", {
        /**
         * loadingType?: LoadingType or ['linear' | 'circular']
         * Sets the type of loading mask depending on value.
         * Defaults to [LoadingType.Circular | 'circular'].
         */
        set: function (type) {
            switch (type) {
                case LoadingType.Linear:
                    this._type = LoadingType.Linear;
                    break;
                default:
                    this._type = LoadingType.Circular;
                    break;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TdLoadingDirective.prototype, "mode", {
        /**
         * LoadingMode?: LoadingMode or ['determinate' | 'indeterminate']
         * Sets the mode of loading mask depending on value.
         * Defaults to [LoadingMode.Indeterminate | 'indeterminate'].
         */
        set: function (mode) {
            switch (mode) {
                case LoadingMode.Determinate:
                    this._mode = LoadingMode.Determinate;
                    break;
                default:
                    this._mode = LoadingMode.Indeterminate;
                    break;
            }
        },
        enumerable: true,
        configurable: true
    });
    TdLoadingDirective.prototype.ngOnInit = function () {
        this._viewContainer.createEmbeddedView(this._templateRef);
        this._registerComponent();
    };
    TdLoadingDirective.prototype.ngOnDestroy = function () {
        this._loadingService.removeComponent(this._name);
    };
    /**
     * Creates [TdLoadingComponent] and attaches it to this directive's [ViewContainerRef].
     * Passes this directive's [TemplateRef] to detach/attach it from DOM when loading mask is on.
     */
    TdLoadingDirective.prototype._registerComponent = function () {
        if (!this._name) {
            throw 'Name is needed to register loading directive';
        }
        var options = {
            name: this._name,
            type: this._type,
            mode: this._mode,
        };
        this._loadingService.createReplaceComponent(options, this._viewContainer, this._templateRef);
    };
    __decorate([
        Input('tdLoading'), 
        __metadata('design:type', String), 
        __metadata('design:paramtypes', [String])
    ], TdLoadingDirective.prototype, "name", null);
    __decorate([
        Input('loadingType'), 
        __metadata('design:type', Number), 
        __metadata('design:paramtypes', [Number])
    ], TdLoadingDirective.prototype, "type", null);
    __decorate([
        Input('loadingMode'), 
        __metadata('design:type', Number), 
        __metadata('design:paramtypes', [Number])
    ], TdLoadingDirective.prototype, "mode", null);
    TdLoadingDirective = __decorate([
        Directive({
            selector: '[tdLoading]',
        }), 
        __metadata('design:paramtypes', [ViewContainerRef, TemplateRef, TdLoadingService])
    ], TdLoadingDirective);
    return TdLoadingDirective;
}());

//# sourceMappingURL=loading.directive.js.map
