(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/http'), require('@angular/forms'), require('@angular/material'), require('rxjs/Subject')) :
    typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/common', '@angular/http', '@angular/forms', '@angular/material', 'rxjs/Subject'], factory) :
    (factory((global.td = global.td || {}, global.td.core = global.td.core || {}),global.ng.core,global.ng.common,global.ng.http,global.ng.forms,global.ng.material,global.Rx));
}(this, (function (exports,_angular_core,_angular_common,_angular_http,_angular_forms,_angular_material,rxjs_Subject) { 'use strict';

var __decorate$2 = (window && window.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$2 = (window && window.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var TdLayoutService = (function () {
    function TdLayoutService() {
        this._openSidenavSources = {};
        this._openSidenavObservables = {};
    }
    TdLayoutService.prototype.registerSidenav = function (name) {
        if (this._openSidenavSources[name]) {
            throw 'Sidenav already registered with that name';
        }
        this._openSidenavSources[name] = new rxjs_Subject.Subject();
        this._openSidenavObservables[name] = this._openSidenavSources[name].asObservable();
        return this._openSidenavObservables[name];
    };
    TdLayoutService.prototype.openSideNav = function (name) {
        if (this._openSidenavSources[name]) {
            this._openSidenavSources[name].next(undefined);
        }
    };
    TdLayoutService = __decorate$2([
        _angular_core.Injectable(), 
        __metadata$2('design:paramtypes', [])
    ], TdLayoutService);
    return TdLayoutService;
}());

var __decorate$1 = (window && window.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$1 = (window && window.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var TdLayoutComponent = (function () {
    function TdLayoutComponent(layoutService) {
        var _this = this;
        this.layoutService = layoutService;
        this._showUserMenu = false;
        this._subcriptions = [];
        /**
         * method thats called when logout is clicked
         */
        this.onLogoutEvent = new _angular_core.EventEmitter();
        this._subcriptions.push(this.layoutService.registerSidenav('menu').subscribe(function () {
            _this.open();
        }));
    }
    /**
     * removes subscriptions when destroyed
     */
    TdLayoutComponent.prototype.ngOnDestroy = function () {
        this._subcriptions.forEach(function (subs) {
            subs.unsubscribe();
        });
    };
    /**
     * subscribes as observable to the onClose() event from the sideNav to hide userMenu when closed.
     */
    TdLayoutComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        this._subcriptions.push(this._sideNav.onClose.asObservable().subscribe(function () {
            _this._showUserMenu = false;
        }));
    };
    TdLayoutComponent.prototype.logoutClick = function () {
        this._onLogout();
    };
    /**
     * toggle userMenu to hide/show
     */
    TdLayoutComponent.prototype.toggleUserMenu = function () {
        this._showUserMenu = !this._showUserMenu;
    };
    TdLayoutComponent.prototype.isShowUserMenu = function () {
        return this._showUserMenu;
    };
    /**
     * Proxy toggle method to access sidenav from outside (from td-layout template).
     */
    TdLayoutComponent.prototype.toggle = function () {
        this._sideNav.toggle();
    };
    /**
     * Proxy open method to access sidenav from outside (from td-layout template).
     */
    TdLayoutComponent.prototype.open = function () {
        this._sideNav.open();
    };
    /**
     * Proxy close method to access sidenav from outside (from td-layout template).
     */
    TdLayoutComponent.prototype.close = function () {
        this._sideNav.close();
    };
    /**
     * emits logoutEvent
     */
    TdLayoutComponent.prototype._onLogout = function () {
        this.onLogoutEvent.emit(undefined);
    };
    __decorate$1([
        _angular_core.ViewChild(_angular_material.MdSidenav), 
        __metadata$1('design:type', _angular_material.MdSidenav)
    ], TdLayoutComponent.prototype, "_sideNav", void 0);
    __decorate$1([
        _angular_core.Input('title'), 
        __metadata$1('design:type', String)
    ], TdLayoutComponent.prototype, "title", void 0);
    __decorate$1([
        _angular_core.Input('icon'), 
        __metadata$1('design:type', String)
    ], TdLayoutComponent.prototype, "icon", void 0);
    __decorate$1([
        _angular_core.Input('logo'), 
        __metadata$1('design:type', String)
    ], TdLayoutComponent.prototype, "logo", void 0);
    __decorate$1([
        _angular_core.Input('displayName'), 
        __metadata$1('design:type', String)
    ], TdLayoutComponent.prototype, "displayName", void 0);
    __decorate$1([
        _angular_core.Output('logout'), 
        __metadata$1('design:type', _angular_core.EventEmitter)
    ], TdLayoutComponent.prototype, "onLogoutEvent", void 0);
    TdLayoutComponent = __decorate$1([
        _angular_core.Component({
            providers: [TdLayoutService],
            selector: 'td-layout',
            styles: ["/deep/ md-toolbar { box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.26); z-index: 1; } "],
            template: "<md-sidenav-layout fullscreen> <md-sidenav #sideMenu> <md-toolbar> <div layout=\"column\"> <span layout=\"row\" layout-align=\"start center\"> <md-icon *ngIf=\"icon\">{{icon}}</md-icon> <md-icon *ngIf=\"logo\" class=\"md-icon-logo\" svgSrc=\"{{logo}}\"></md-icon> <span class=\"md-subhead\">{{title}}</span> </span> <a *ngIf=\"displayName\" (click)=\"toggleUserMenu()\" class=\"md-body-1 md-toolbar-link\" layout=\"row\" layout-align=\"space-around center\"> <span>{{displayName}}</span> <md-icon *ngIf=\"!isShowUserMenu()\">arrow_drop_down</md-icon> <md-icon *ngIf=\"isShowUserMenu()\">arrow_drop_up</md-icon> </a> </div> </md-toolbar> <md-nav-list *ngIf=\"isShowUserMenu()\"> <a md-list-item (click)=\"logoutClick()\"><md-icon>exit_to_app</md-icon> Logout</a> </md-nav-list> <div *ngIf=\"!isShowUserMenu()\"> <ng-content select=\"[menu-items]\"></ng-content> <md-nav-list> <md-divider></md-divider> <a md-list-item (click)=\"sideMenu.close()\"><md-icon>cancel</md-icon> Close</a> </md-nav-list> </div> </md-sidenav> <ng-content></ng-content> </md-sidenav-layout> ",
        }), 
        __metadata$1('design:paramtypes', [TdLayoutService])
    ], TdLayoutComponent);
    return TdLayoutComponent;
}());

var __decorate$3 = (window && window.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$3 = (window && window.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var TdLayoutNavComponent = (function () {
    function TdLayoutNavComponent(layoutService) {
        this.layoutService = layoutService;
        /**
         * method thats called when menu is clicked
         */
        this.onOpenMenu = new _angular_core.EventEmitter();
    }
    TdLayoutNavComponent.prototype.menuClick = function () {
        this._onMenuClick();
    };
    /**
     * emits menuEvent
     */
    TdLayoutNavComponent.prototype._onMenuClick = function () {
        this.onOpenMenu.emit(undefined);
        this.layoutService.openSideNav('menu');
    };
    __decorate$3([
        _angular_core.Input('title'), 
        __metadata$3('design:type', String)
    ], TdLayoutNavComponent.prototype, "title", void 0);
    __decorate$3([
        _angular_core.Input('icon'), 
        __metadata$3('design:type', String)
    ], TdLayoutNavComponent.prototype, "icon", void 0);
    __decorate$3([
        _angular_core.Input('logo'), 
        __metadata$3('design:type', String)
    ], TdLayoutNavComponent.prototype, "logo", void 0);
    __decorate$3([
        _angular_core.Output('openMenu'), 
        __metadata$3('design:type', _angular_core.EventEmitter)
    ], TdLayoutNavComponent.prototype, "onOpenMenu", void 0);
    TdLayoutNavComponent = __decorate$3([
        _angular_core.Component({
            selector: 'td-layout-nav',
            styles: [""],
            template: "<div layout=\"column\" layout-fill> <md-toolbar color=\"primary\"> <button md-button (click)=\"menuClick()\" md-icon-button><md-icon class=\"md-24\">menu</md-icon></button> <md-icon *ngIf=\"icon\">{{icon}}</md-icon> <md-icon *ngIf=\"logo\" class=\"md-icon-logo\" svgSrc=\"{{logo}}\"></md-icon> <span>{{title}}</span> <ng-content select=\"[toolbar-content]\"></ng-content> </md-toolbar> <div flex class=\"content md-content\"> <ng-content></ng-content> </div> </div> ",
        }), 
        __metadata$3('design:paramtypes', [TdLayoutService])
    ], TdLayoutNavComponent);
    return TdLayoutNavComponent;
}());

var __decorate$4 = (window && window.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$4 = (window && window.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var TdLayoutNavListComponent = (function () {
    function TdLayoutNavListComponent(layoutService) {
        this.layoutService = layoutService;
        this._transitioning = false;
        /**
         * method thats called when menu is clicked
         */
        this.onOpenMenu = new _angular_core.EventEmitter();
    }
    TdLayoutNavListComponent.prototype.menuClick = function () {
        this._onMenuClick();
    };
    /**
     * Proxy toggle method to access sidenav from outside (from td-layout template).
     */
    TdLayoutNavListComponent.prototype.toggle = function () {
        var _this = this;
        if (!this._transitioning) {
            this._transitioning = true;
            this._sideNav.toggle().then(function () {
                _this._transitioning = false;
            });
        }
    };
    /**
     * Proxy open method to access sidenav from outside (from td-layout template).
     */
    TdLayoutNavListComponent.prototype.open = function () {
        var _this = this;
        if (!this._transitioning) {
            this._transitioning = true;
            this._sideNav.open().then(function () {
                _this._transitioning = false;
            });
        }
    };
    /**
     * Proxy close method to access sidenav from outside (from td-layout template).
     */
    TdLayoutNavListComponent.prototype.close = function () {
        var _this = this;
        if (!this._transitioning) {
            this._transitioning = true;
            this._sideNav.close().then(function () {
                _this._transitioning = false;
            });
        }
    };
    /**
     * emits menuEvent
     */
    TdLayoutNavListComponent.prototype._onMenuClick = function () {
        this.onOpenMenu.emit(undefined);
        this.layoutService.openSideNav('menu');
    };
    __decorate$4([
        _angular_core.Input('title'), 
        __metadata$4('design:type', String)
    ], TdLayoutNavListComponent.prototype, "title", void 0);
    __decorate$4([
        _angular_core.Input('icon'), 
        __metadata$4('design:type', String)
    ], TdLayoutNavListComponent.prototype, "icon", void 0);
    __decorate$4([
        _angular_core.Input('logo'), 
        __metadata$4('design:type', String)
    ], TdLayoutNavListComponent.prototype, "logo", void 0);
    __decorate$4([
        _angular_core.ViewChild(_angular_material.MdSidenav), 
        __metadata$4('design:type', _angular_material.MdSidenav)
    ], TdLayoutNavListComponent.prototype, "_sideNav", void 0);
    __decorate$4([
        _angular_core.Output('openMenu'), 
        __metadata$4('design:type', _angular_core.EventEmitter)
    ], TdLayoutNavListComponent.prototype, "onOpenMenu", void 0);
    TdLayoutNavListComponent = __decorate$4([
        _angular_core.Component({
            selector: 'td-layout-nav-list',
            styles: ["/** * Mixin that creates a new stacking context. * see https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context */ :host /deep/ md-sidenav-layout > .md-sidenav-content { margin-left: 0 !important; } @media (min-width: 600px) { :host /deep/ md-sidenav-layout { height: 100%; display: flex; } :host /deep/ md-sidenav-layout > md-sidenav { display: flex; position: relative; height: 100%; width: 382px; flex: 0 0 auto; transition: none; } :host /deep/ md-sidenav-layout > md-sidenav.md-sidenav-closed, :host /deep/ md-sidenav-layout > md-sidenav.md-sidenav-closing { visibility: visible; transform: translate3d(0, 0, 0); } :host /deep/ md-sidenav-layout > .md-sidenav-content { margin-left: 0 !important; display: flex; flex-grow: 1; } } @media (max-width: 599px) { :host /deep/ md-sidenav-layout > md-sidenav.md-sidenav-opened, :host /deep/ md-sidenav-layout > md-sidenav.md-sidenav-opening, :host /deep/ md-sidenav-layout > md-sidenav.md-sidenav-closing { z-index: 3; } :host /deep/ md-sidenav-layout > .md-sidenav-content { z-index: 2; } } md-toolbar { box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.26); z-index: 1; } md-toolbar.md-primary { color: white; } .md-sidenav-left { z-index: 1; } .list { background-color: #fff; text-align: start; } "],
            template: "<div layout=\"column\" layout-fill> <div class=\"md-content\" flex layout-fill> <md-sidenav-layout layout=\"row\" layout-fill> <md-sidenav opened align=\"start\" mode=\"side\" layout=\"column\" layout-fill class=\"md-sidenav-left app-list md-whiteframe-z1\" flex-gt-xs=\"none\"> <md-toolbar color=\"primary\" class=\"md-whiteframe-z1\"> <button md-button (click)=\"menuClick()\" md-icon-button><md-icon class=\"md-24\">menu</md-icon></button> <md-icon *ngIf=\"icon\">{{icon}}</md-icon> <md-icon *ngIf=\"logo\" class=\"md-icon-logo\" svgSrc=\"{{logo}}\"></md-icon> <span>{{title}}</span> <ng-content select=\"[list-toolbar-content]\"></ng-content> </md-toolbar> <div flex class=\"list md-content\"> <ng-content select=\"[list-items]\"></ng-content> </div> </md-sidenav> <div layout=\"column\" layout-fill class=\"md-content content\"> <md-toolbar color=\"primary\" class=\"md-whiteframe-z1\"> <button md-button (click)=\"toggle()\" md-icon-button hide-gt-xs><md-icon class=\"md-24\">arrow_back</md-icon></button> <ng-content select=\"[nav-toolbar-content]\"></ng-content> </md-toolbar> <div class=\"md-content\" flex> <ng-content></ng-content> </div> </div> </md-sidenav-layout> </div> </div> ",
        }), 
        __metadata$4('design:paramtypes', [TdLayoutService])
    ], TdLayoutNavListComponent);
    return TdLayoutNavListComponent;
}());

var __decorate$5 = (window && window.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$5 = (window && window.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var TdLayoutCardOverComponent = (function () {
    function TdLayoutCardOverComponent() {
    }
    __decorate$5([
        _angular_core.Input('title'), 
        __metadata$5('design:type', String)
    ], TdLayoutCardOverComponent.prototype, "title", void 0);
    __decorate$5([
        _angular_core.Input('subtitle'), 
        __metadata$5('design:type', String)
    ], TdLayoutCardOverComponent.prototype, "subtitle", void 0);
    TdLayoutCardOverComponent = __decorate$5([
        _angular_core.Component({
            selector: 'td-layout-card-over',
            styles: [":host { position: relative; display: block; z-index: 2; width: 100%; min-height: 100%; height: 100%; } :host div[after-card] { display: block; } .margin { margin-top: -64px; } "],
            template: "<md-toolbar color=\"primary\"> </md-toolbar> <div layout-gt-xs=\"row\" layout-align-gt-xs=\"center start\" layout-fill class=\"margin\"> <div flex-gt-xs=\"65\"> <md-card> <md-card-title *ngIf=\"title\">{{title}}</md-card-title> <md-card-subtitle *ngIf=\"subtitle\">{{subtitle}}</md-card-subtitle> <md-divider *ngIf=\"title || subtitle\"></md-divider> <ng-content></ng-content> </md-card> <ng-content select=\"[after-card]\"></ng-content> </div> </div> ",
        }), 
        __metadata$5('design:paramtypes', [])
    ], TdLayoutCardOverComponent);
    return TdLayoutCardOverComponent;
}());

var __decorate$6 = (window && window.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$6 = (window && window.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var TdLayoutManageListComponent = (function () {
    function TdLayoutManageListComponent(layoutService) {
        this.layoutService = layoutService;
        this._transitioning = false;
        /**
         * method thats called when menu is clicked
         */
        this.onOpenMenu = new _angular_core.EventEmitter();
    }
    TdLayoutManageListComponent.prototype.menuClick = function () {
        this._onMenuClick();
    };
    /**
     * Proxy toggle method to access sidenav from outside (from td-layout template).
     */
    TdLayoutManageListComponent.prototype.toggle = function () {
        var _this = this;
        if (!this._transitioning) {
            this._transitioning = true;
            this._sideNav.toggle().then(function () {
                _this._transitioning = false;
            });
        }
    };
    /**
     * Proxy open method to access sidenav from outside (from td-layout template).
     */
    TdLayoutManageListComponent.prototype.open = function () {
        var _this = this;
        if (!this._transitioning) {
            this._transitioning = true;
            this._sideNav.open().then(function () {
                _this._transitioning = false;
            });
        }
    };
    /**
     * Proxy close method to access sidenav from outside (from td-layout template).
     */
    TdLayoutManageListComponent.prototype.close = function () {
        var _this = this;
        if (!this._transitioning) {
            this._transitioning = true;
            this._sideNav.close().then(function () {
                _this._transitioning = false;
            });
        }
    };
    /**
     * emits menuEvent
     */
    TdLayoutManageListComponent.prototype._onMenuClick = function () {
        this.onOpenMenu.emit(undefined);
        this.layoutService.openSideNav('menu');
    };
    __decorate$6([
        _angular_core.ViewChild(_angular_material.MdSidenav), 
        __metadata$6('design:type', _angular_material.MdSidenav)
    ], TdLayoutManageListComponent.prototype, "_sideNav", void 0);
    __decorate$6([
        _angular_core.Output('openMenu'), 
        __metadata$6('design:type', _angular_core.EventEmitter)
    ], TdLayoutManageListComponent.prototype, "onOpenMenu", void 0);
    TdLayoutManageListComponent = __decorate$6([
        _angular_core.Component({
            selector: 'td-layout-manage-list',
            styles: [":host { margin: 0; width: 100%; min-height: 100%; height: 100%; position: relative; display: flex; z-index: 0; overflow: hidden; } :host /deep/ md-nav-list a[md-list-item] .md-list-item { font-size: 14px; } :host /deep/ md-sidenav-layout > .md-sidenav-content { margin-left: 0 !important; } @media (max-width: 599px) { :host /deep/ md-sidenav-layout > md-sidenav { width: 100%; } } @media (min-width: 600px) { :host /deep/ md-sidenav-layout { height: 100%; display: flex; } :host /deep/ md-sidenav-layout > md-sidenav { width: 257px; transition: none; display: flex; position: relative; height: 100%; min-height: 100%; flex: 0 0 auto; } :host /deep/ md-sidenav-layout > md-sidenav.md-sidenav-closed, :host /deep/ md-sidenav-layout > md-sidenav.md-sidenav-closing { visibility: visible; transform: translate3d(0, 0, 0); } :host /deep/ md-sidenav-layout > .md-sidenav-content { display: flex; flex-grow: 1; } } .list { background-color: #fff; text-align: start; } .content { overflow: hidden; } "],
            template: "<div class=\"md-content\" layout=\"column\" layout-fill> <md-sidenav-layout class=\"md-content\" flex layout=\"row\" layout-fill> <md-sidenav opened align=\"start\" mode=\"side\" layout=\"column\" layout-fill class=\"md-sidenav-left app-list md-whiteframe-z1\"> <div flex class=\"md-content list\"> <ng-content select=\"[list-items]\"></ng-content> </div> </md-sidenav> <div layout=\"column\" layout-fill class=\"md-content content\"> <md-toolbar class=\"md-whiteframe-z1\"> <button md-button (click)=\"toggle()\" md-icon-button hide-gt-xs><md-icon class=\"md-24\">arrow_back</md-icon></button> <ng-content select=\"[toolbar-buttons]\"></ng-content> </md-toolbar> <div class=\"md-content\" flex> <ng-content></ng-content> </div> </div> </md-sidenav-layout> </div> ",
        }), 
        __metadata$6('design:paramtypes', [TdLayoutService])
    ], TdLayoutManageListComponent);
    return TdLayoutManageListComponent;
}());

var __extends = (window && window.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate$8 = (window && window.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$8 = (window && window.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

(function (StepState) {
    StepState[StepState["None"] = 'none'] = "None";
    StepState[StepState["Required"] = 'required'] = "Required";
    StepState[StepState["Complete"] = 'complete'] = "Complete";
})(exports.StepState || (exports.StepState = {}));
var TdStepContentDirective = (function (_super) {
    __extends(TdStepContentDirective, _super);
    function TdStepContentDirective(templateRef, viewContainerRef) {
        _super.call(this, templateRef, viewContainerRef);
    }
    TdStepContentDirective = __decorate$8([
        _angular_core.Directive({
            selector: '[td-step-content]template',
        }), 
        __metadata$8('design:paramtypes', [_angular_core.TemplateRef, _angular_core.ViewContainerRef])
    ], TdStepContentDirective);
    return TdStepContentDirective;
}(_angular_material.TemplatePortalDirective));
var TdStepActionsDirective = (function (_super) {
    __extends(TdStepActionsDirective, _super);
    function TdStepActionsDirective(templateRef, viewContainerRef) {
        _super.call(this, templateRef, viewContainerRef);
    }
    TdStepActionsDirective = __decorate$8([
        _angular_core.Directive({
            selector: '[td-step-actions]template',
        }), 
        __metadata$8('design:paramtypes', [_angular_core.TemplateRef, _angular_core.ViewContainerRef])
    ], TdStepActionsDirective);
    return TdStepActionsDirective;
}(_angular_material.TemplatePortalDirective));
var TdStepSummaryDirective = (function (_super) {
    __extends(TdStepSummaryDirective, _super);
    function TdStepSummaryDirective(templateRef, viewContainerRef) {
        _super.call(this, templateRef, viewContainerRef);
    }
    TdStepSummaryDirective = __decorate$8([
        _angular_core.Directive({
            selector: '[td-step-summary]template',
        }), 
        __metadata$8('design:paramtypes', [_angular_core.TemplateRef, _angular_core.ViewContainerRef])
    ], TdStepSummaryDirective);
    return TdStepSummaryDirective;
}(_angular_material.TemplatePortalDirective));
var TdStepComponent = (function () {
    function TdStepComponent() {
        this._active = false;
        this._state = exports.StepState.None;
        this._disabled = false;
        /**
         * activated?: function
         * Event emitted when [TdStepComponent] is activated.
         */
        this.onActivated = new _angular_core.EventEmitter();
        /**
         * deactivated?: function
         * Event emitted when [TdStepComponent] is deactivated.
         */
        this.onDeactivated = new _angular_core.EventEmitter();
    }
    Object.defineProperty(TdStepComponent.prototype, "number", {
        get: function () {
            return this._number;
        },
        /**
         * Number assigned by [TdStepsComponent] parent element.
         */
        set: function (num) {
            if (this._number > 0) {
                return;
            }
            this._number = num;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TdStepComponent.prototype, "active", {
        get: function () {
            return this._active;
        },
        /**
         * active?: boolean
         * Toggles [TdStepComponent] between active/deactive.
         */
        set: function (active) {
            this._setActive(active);
        },
        enumerable: true,
        configurable: true
    });
    
    
    Object.defineProperty(TdStepComponent.prototype, "disabled", {
        get: function () {
            return this._disabled;
        },
        /**
         * disabled?: boolean
         * Disables icon and header, blocks click event and sets [TdStepComponent] to deactive if 'true'.
         */
        set: function (disabled) {
            if (disabled && this._active) {
                this._active = false;
                this._onDeactivated();
            }
            this._disabled = disabled;
        },
        enumerable: true,
        configurable: true
    });
    
    
    Object.defineProperty(TdStepComponent.prototype, "state", {
        get: function () {
            return this._state;
        },
        /**
         * state?: StepState or ['none' | 'required' | 'complete']
         * Sets state of [TdStepComponent] depending on value.
         * Defaults to [StepState.None | 'none'].
         */
        set: function (state) {
            switch (state) {
                case exports.StepState.Complete:
                    this._state = exports.StepState.Complete;
                    break;
                case exports.StepState.Required:
                    this._state = exports.StepState.Required;
                    break;
                default:
                    this._state = exports.StepState.None;
                    break;
            }
        },
        enumerable: true,
        configurable: true
    });
    
    TdStepComponent.prototype.ngAfterViewInit = function () {
        if (this.number === undefined) {
            throw 'The [td-step] component needs to have a [td-steps] parent component to work.';
        }
    };
    /**
     * Toggle active state of [TdStepComponent]
     * retuns 'true' if successful, else 'false'.
     */
    TdStepComponent.prototype.toggle = function () {
        return this._setActive(!this._active);
    };
    /**
     * Opens [TdStepComponent]
     * retuns 'true' if successful, else 'false'.
     */
    TdStepComponent.prototype.open = function () {
        return this._setActive(true);
    };
    /**
     * Closes [TdStepComponent]
     * retuns 'true' if successful, else 'false'.
     */
    TdStepComponent.prototype.close = function () {
        return this._setActive(false);
    };
    /**
     * Returns 'true' if [state] equals to [StepState.Complete | 'complete'], else 'false'.
     */
    TdStepComponent.prototype.isComplete = function () {
        return this._state === exports.StepState.Complete;
    };
    
    /**
     * Method to change active state internally and emit the [onActivated] event if 'true' or [onDeactivated]
     * event if 'false'. (Blocked if [disabled] is 'true')
     * returns true if successfully changed state
     */
    TdStepComponent.prototype._setActive = function (newActive) {
        if (this._disabled) {
            return false;
        }
        if (this._active !== newActive) {
            this._active = newActive;
            if (newActive) {
                this._onActivated();
            }
            else {
                this._onDeactivated();
            }
            return true;
        }
        return false;
    };
    
    TdStepComponent.prototype._onActivated = function () {
        this.onActivated.emit(undefined);
    };
    
    TdStepComponent.prototype._onDeactivated = function () {
        this.onDeactivated.emit(undefined);
    };
    
    __decorate$8([
        _angular_core.ContentChild(TdStepContentDirective), 
        __metadata$8('design:type', TdStepContentDirective)
    ], TdStepComponent.prototype, "stepContent", void 0);
    __decorate$8([
        _angular_core.ContentChild(TdStepActionsDirective), 
        __metadata$8('design:type', TdStepActionsDirective)
    ], TdStepComponent.prototype, "stepActions", void 0);
    __decorate$8([
        _angular_core.ContentChild(TdStepSummaryDirective), 
        __metadata$8('design:type', TdStepSummaryDirective)
    ], TdStepComponent.prototype, "stepSummary", void 0);
    __decorate$8([
        _angular_core.Input('label'), 
        __metadata$8('design:type', String)
    ], TdStepComponent.prototype, "label", void 0);
    __decorate$8([
        _angular_core.Input('sublabel'), 
        __metadata$8('design:type', String)
    ], TdStepComponent.prototype, "sublabel", void 0);
    __decorate$8([
        _angular_core.Input('active'), 
        __metadata$8('design:type', Boolean), 
        __metadata$8('design:paramtypes', [Boolean])
    ], TdStepComponent.prototype, "active", null);
    __decorate$8([
        _angular_core.Input('disabled'), 
        __metadata$8('design:type', Boolean), 
        __metadata$8('design:paramtypes', [Boolean])
    ], TdStepComponent.prototype, "disabled", null);
    __decorate$8([
        _angular_core.Input('state'), 
        __metadata$8('design:type', Number), 
        __metadata$8('design:paramtypes', [Number])
    ], TdStepComponent.prototype, "state", null);
    __decorate$8([
        _angular_core.Output('activated'), 
        __metadata$8('design:type', _angular_core.EventEmitter)
    ], TdStepComponent.prototype, "onActivated", void 0);
    __decorate$8([
        _angular_core.Output('deactivated'), 
        __metadata$8('design:type', _angular_core.EventEmitter)
    ], TdStepComponent.prototype, "onDeactivated", void 0);
    TdStepComponent = __decorate$8([
        _angular_core.Component({
            selector: 'td-step',
            template: '<ng-content></ng-content>',
        }), 
        __metadata$8('design:paramtypes', [])
    ], TdStepComponent);
    return TdStepComponent;
}());

var __decorate$7 = (window && window.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$7 = (window && window.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

(function (StepMode) {
    StepMode[StepMode["Vertical"] = 'vertical'] = "Vertical";
    StepMode[StepMode["Horizontal"] = 'horizontal'] = "Horizontal";
})(exports.StepMode || (exports.StepMode = {}));
var TdStepsComponent = (function () {
    function TdStepsComponent() {
        this._prevStep = 0;
        this._subcriptions = [];
        this._mode = exports.StepMode.Vertical;
        /**
         * stepChange?: function
         * Method to be executed when [onStepChange] event is emitted.
         * Emits an [IStepChangeEvent] implemented object.
         */
        this.onStepChange = new _angular_core.EventEmitter();
    }
    Object.defineProperty(TdStepsComponent.prototype, "steps", {
        get: function () {
            return this._steps.toArray();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TdStepsComponent.prototype, "mode", {
        get: function () {
            return this._mode;
        },
        /**
         * mode?: StepMode or ["vertical" | "horizontal"]
         * Defines if the mode of the [TdStepsComponent].  Defaults to [StepMode.Vertical | "vertical"]
         */
        set: function (mode) {
            switch (mode) {
                case exports.StepMode.Horizontal:
                    this._mode = exports.StepMode.Horizontal;
                    break;
                default:
                    this._mode = exports.StepMode.Vertical;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Executed after content is initialized, loops through any [TdStepComponent] children elements,
     * assigns them a number and subscribes as an observer to their [onActivated] event.
     */
    TdStepsComponent.prototype.ngAfterContentInit = function () {
        var _this = this;
        var stepCount = 0;
        if (this._steps.toArray().length < 1) {
            throw "No [td-step]'s were defined in the [td-steps] component. At least one [td-step] is required.";
        }
        this._steps.toArray().forEach(function (step) {
            step.number = ++stepCount;
            var subscription = step.onActivated.asObservable().subscribe(function () {
                _this._onStepSelection(step.number);
            });
            _this._subcriptions.push(subscription);
        });
    };
    /**
     * Unsubscribes from [TdStepComponent] children elements when component is destroyed.
     */
    TdStepsComponent.prototype.ngOnDestroy = function () {
        this._subcriptions.forEach(function (subs) {
            subs.unsubscribe();
        });
    };
    /**
     * Returns 'true' if [mode] equals to [StepMode.Horizontal | 'horizontal'], else 'false'.
     */
    TdStepsComponent.prototype.isHorizontal = function () {
        return this._mode === exports.StepMode.Horizontal;
    };
    /**
     * Returns 'true' if [mode] equals to [StepMode.Vertical | 'vertical'], else 'false'.
     */
    TdStepsComponent.prototype.isVertical = function () {
        return this._mode === exports.StepMode.Vertical;
    };
    TdStepsComponent.prototype.areStepsActive = function () {
        return this._steps.filter(function (step) {
            return step.active;
        }).length > 0;
    };
    /**
     * Wraps previous and new [TdStepComponent] numbers in an object that implements [IStepChangeEvent]
     * and emits [onStepChange] event.
     */
    TdStepsComponent.prototype._onStepSelection = function (stepNumber) {
        if (this._prevStep !== stepNumber) {
            var prevStep = this._prevStep > 0 ? this._prevStep : undefined;
            this._prevStep = stepNumber;
            var event_1 = {
                newStep: stepNumber,
                prevStep: prevStep,
            };
            this._deactivateAllBut(stepNumber);
            this.onStepChange.emit(event_1);
        }
    };
    /**
     * Loops through [TdStepComponent] children elements and deactivates them ignoring the one passed as an argument.
     */
    TdStepsComponent.prototype._deactivateAllBut = function (activeStep) {
        this._steps.filter(function (step) { return step.number !== activeStep; })
            .forEach(function (step) {
            step.active = false;
        });
    };
    __decorate$7([
        _angular_core.ContentChildren(TdStepComponent), 
        __metadata$7('design:type', _angular_core.QueryList)
    ], TdStepsComponent.prototype, "_steps", void 0);
    __decorate$7([
        _angular_core.Input('mode'), 
        __metadata$7('design:type', Number), 
        __metadata$7('design:paramtypes', [Number])
    ], TdStepsComponent.prototype, "mode", null);
    __decorate$7([
        _angular_core.Output('stepChange'), 
        __metadata$7('design:type', _angular_core.EventEmitter)
    ], TdStepsComponent.prototype, "onStepChange", void 0);
    TdStepsComponent = __decorate$7([
        _angular_core.Component({
            selector: 'td-steps',
            styles: [".td-line-wrapper, .td-step { position: relative; } .td-line-wrapper { width: 24px; } .td-horizontal-line { border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgba(0, 0, 0, 0.12); height: 1px; position: relative; top: 36px; margin-left: -6px; margin-right: -3px; min-width: 15px; } .td-vertical-line { position: absolute; left: 20px; bottom: -16px; top: -16px; border-left-width: 1px; border-left-style: solid; border-left-color: rgba(0, 0, 0, 0.12); } .td-steps-header { box-shadow: 0px 2px 1px -1px rgba(0, 0, 0, 0.2), 0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 1px 3px 0px rgba(0, 0, 0, 0.12); } "],
            template: "<div *ngIf=\"isHorizontal()\" class=\"td-steps-header\" layout=\"row\" title> <template let-step let-last=\"last\" ngFor [ngForOf]=\"steps\"> <td-step-header (keydown.enter)=\"step.toggle()\" [number]=\"step.number\" [label]=\"step.label\" [sublabel]=\"step.sublabel | truncate:30\" [active]=\"step.active\"  [disabled]=\"step.disabled\"  [state]=\"step.state\" (click)=\"step.toggle()\"> </td-step-header> <span *ngIf=\"!last\" class=\"td-horizontal-line\" flex></span> </template> </div> <div *ngFor=\"let step of steps; let last = last\" class=\"td-step\" layout=\"column\"> <td-step-header (keydown.enter)=\"step.toggle()\" [number]=\"step.number\" [label]=\"step.label\" [sublabel]=\"step.sublabel\" [active]=\"step.active\"  [disabled]=\"step.disabled\"  [state]=\"step.state\" (click)=\"step.toggle()\" *ngIf=\"isVertical()\"> </td-step-header> <template [ngIf]=\"isVertical() || step.active || (!areStepsActive() && _prevStep === step.number)\"> <td-step-body [active]=\"step.active\" [state]=\"step.state\"> <div *ngIf=\"isVertical()\" class=\"td-line-wrapper\"> <div *ngIf=\"!last\" class=\"td-vertical-line\"></div> </div> <template td-step-body-content [portalHost]=\"step.stepContent\"></template> <template td-step-body-actions [portalHost]=\"step.stepActions\"></template> <template td-step-body-summary [portalHost]=\"step.stepSummary\"></template> </td-step-body> </template> </div> ",
        }), 
        __metadata$7('design:paramtypes', [])
    ], TdStepsComponent);
    return TdStepsComponent;
}());

var __decorate$9 = (window && window.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$9 = (window && window.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var TdStepHeaderComponent = (function () {
    function TdStepHeaderComponent() {
        /**
         * state?: StepState or ['none' | 'required' | 'complete']
         * Sets styles for state of header.
         * Defaults to [StepState.None | 'none'].
         */
        this.state = exports.StepState.None;
    }
    /**
     * Returns 'true' if [state] equals to [StepState.Complete | 'complete'], else 'false'.
     */
    TdStepHeaderComponent.prototype.isComplete = function () {
        return this.state === exports.StepState.Complete;
    };
    
    /**
     * Returns 'true' if [state] equals to [StepState.Required | 'required'], else 'false'.
     */
    TdStepHeaderComponent.prototype.isRequired = function () {
        return this.state === exports.StepState.Required;
    };
    
    __decorate$9([
        _angular_core.Input('number'), 
        __metadata$9('design:type', Number)
    ], TdStepHeaderComponent.prototype, "number", void 0);
    __decorate$9([
        _angular_core.Input('label'), 
        __metadata$9('design:type', String)
    ], TdStepHeaderComponent.prototype, "label", void 0);
    __decorate$9([
        _angular_core.Input('sublabel'), 
        __metadata$9('design:type', String)
    ], TdStepHeaderComponent.prototype, "sublabel", void 0);
    __decorate$9([
        _angular_core.Input('active'), 
        __metadata$9('design:type', Boolean)
    ], TdStepHeaderComponent.prototype, "active", void 0);
    __decorate$9([
        _angular_core.Input('disabled'), 
        __metadata$9('design:type', Boolean)
    ], TdStepHeaderComponent.prototype, "disabled", void 0);
    __decorate$9([
        _angular_core.Input('state'), 
        __metadata$9('design:type', Number)
    ], TdStepHeaderComponent.prototype, "state", void 0);
    TdStepHeaderComponent = __decorate$9([
        _angular_core.Component({
            selector: 'td-step-header',
            styles: [":host /deep/ md-nav-list { padding-top: 0px; } :host /deep/ md-nav-list [md-list-item]:active, :host /deep/ md-nav-list [md-list-item]:focus { outline: none; } :host /deep/ md-nav-list [md-list-item].md-interaction-disabled .md-list-item { background: none !important; } :host /deep/ md-nav-list .md-list-item { flex: 1; height: 72px !important; padding: 0px !important; } .md-ripple-boundary { position: relative; height: 72px; } .td-step-header md-icon.td-edit-icon { margin-right: 8px; } .md-caption { color: rgba(0, 0, 0, 0.54); } .md-disabled, .md-disabled * { color: rgba(0, 0, 0, 0.38); } .md-warn, .md-warn * { color: #f44336; } .md-complete { color: #2196f3; } md-icon.md-warn { font-size: 24px; height: 24px; width: 24px; } md-icon.md-complete { position: relative; left: -2px; top: 2px; font-size: 28px; height: 24px; width: 24px; } .td-circle { height: 24px; width: 24px; line-height: 24px; border-radius: 99%; color: #ffffff; text-align: center; flex: none; } .td-circle.md-active { background-color: #2196f3; } .td-circle.md-inactive { background-color: rgba(0, 0, 0, 0.38); } .td-circle md-icon { fill: #ffffff; margin-top: 2px; font-weight: bold; } .td-triangle { color: #f44336; } .td-triangle > md-icon { font-size: 27px; } .td-complete { font-size: 0; } .td-circle, .td-complete { margin-left: 8px; font-size: 14px; } .td-triangle { margin-left: 7px; } .td-step-label { padding-left: 8px; padding-right: 8px; } .td-step-sublabel { line-height: 14px; font-weight: normal; } "],
            template: "<div class=\"td-step-header\" layout=\"row\" layout-align=\"start center\" flex> <md-nav-list flex> <a md-list-item [class.md-interaction-disabled]=\"disabled\" [tabIndex]=\"disabled ? -1 : 0\" flex> <div class=\"md-ripple-boundary\" md-ripple [md-ripple-disabled]=\"disabled\" layout=\"row\"  layout-align=\"start center\" flex> <div class=\"td-circle\" [class.md-inactive]=\"(!active && !isComplete()) || disabled\" [class.md-active]=\"active && !disabled\" *ngIf=\"!isRequired() && !isComplete()\"> <span *ngIf=\"(active || !isComplete())\">{{number || ''}}</span> </div> <div class=\"td-complete\" *ngIf=\"isComplete()\"> <md-icon class=\"md-complete\">check_circle</md-icon> </div> <div class=\"td-triangle\" [class.bg-muted]=\"disabled\" *ngIf=\"isRequired()\"> <md-icon class=\"md-warn\">warning</md-icon> </div> <div class=\"td-step-label\" [class.md-disabled]=\"(!active && !isComplete()) || disabled\" [class.md-warn]=\"isRequired() && !disabled\"> <div class=\"md-body-2\">{{label}}</div> <div class=\"md-caption td-step-sublabel\">{{sublabel}}</div> </div> <span flex></span> <md-icon class=\"td-edit-icon\" *ngIf=\"isComplete() && !active && !disabled\">mode_edit</md-icon> </div> </a> </md-nav-list> </div>",
        }), 
        __metadata$9('design:paramtypes', [])
    ], TdStepHeaderComponent);
    return TdStepHeaderComponent;
}());

var __decorate$10 = (window && window.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$10 = (window && window.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var TdStepBodyComponent = (function () {
    function TdStepBodyComponent() {
        /**
         * state?: StepState or ['none' | 'required' | 'complete']
         * Sets styles for state of body.
         * Defaults to [StepState.None | 'none'].
         */
        this.state = exports.StepState.None;
    }
    /**
     * Returns 'true' if [state] equals to [StepState.Complete | 'complete'], else 'false'.
     */
    TdStepBodyComponent.prototype.isComplete = function () {
        return this.state === exports.StepState.Complete;
    };
    
    __decorate$10([
        _angular_core.Input('active'), 
        __metadata$10('design:type', Boolean)
    ], TdStepBodyComponent.prototype, "active", void 0);
    __decorate$10([
        _angular_core.Input('state'), 
        __metadata$10('design:type', Number)
    ], TdStepBodyComponent.prototype, "state", void 0);
    TdStepBodyComponent = __decorate$10([
        _angular_core.Component({
            selector: 'td-step-body',
            styles: [".td-step-content, .td-step-summary, .td-step-actions { padding-top: 16px; padding-left: 16px; display: block; } .td-step-summary, .td-step-actions { margin-bottom: 16px; } "],
            template: "<div layout=\"row\" flex> <ng-content></ng-content> <div flex> <div [tdToggle]=\"!active\"> <div class=\"td-step-content\"> <ng-content select=\"[td-step-body-content]\"></ng-content> </div> <div layout=\"row\" class=\"td-step-actions\"> <ng-content select=\"[td-step-body-actions]\"></ng-content> </div> </div> <div [tdToggle]=\"active || !isComplete()\" class=\"td-step-summary\"> <ng-content select=\"[td-step-body-summary]\"></ng-content> </div> </div> </div>",
        }), 
        __metadata$10('design:paramtypes', [])
    ], TdStepBodyComponent);
    return TdStepBodyComponent;
}());

var __decorate$12 = (window && window.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$12 = (window && window.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

(function (LoadingType) {
    LoadingType[LoadingType["Circular"] = 'circular'] = "Circular";
    LoadingType[LoadingType["Linear"] = 'linear'] = "Linear";
})(exports.LoadingType || (exports.LoadingType = {}));

(function (LoadingMode) {
    LoadingMode[LoadingMode["Determinate"] = 'determinate'] = "Determinate";
    LoadingMode[LoadingMode["Indeterminate"] = 'indeterminate'] = "Indeterminate";
})(exports.LoadingMode || (exports.LoadingMode = {}));
var TdLoadingComponent = (function () {
    function TdLoadingComponent() {
        this._animationIn = new rxjs_Subject.Subject();
        this._animationOut = new rxjs_Subject.Subject();
        this._mode = exports.LoadingMode.Indeterminate;
        this._defaultMode = exports.LoadingMode.Indeterminate;
        this._reset = true;
        /**
         * Flag for animation
         */
        this.animation = false;
        /**
         * Sets value of [TdLoadingComponent] if mode is 'LoadingMode.Determinate'
         */
        this.value = 0;
        /**
         * overlay: boolean
         * Sets if [TdLoadingComponent] is fullscreen or not.
         */
        this.overlay = false;
        /**
         * type: LoadingType
         * Sets type of [TdLoadingComponent] rendered.
         */
        this.type = exports.LoadingType.Circular;
    }
    Object.defineProperty(TdLoadingComponent.prototype, "reset", {
        // Flag to reset the loader value and animation before removing it from DOM
        get: function () {
            return this._reset;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TdLoadingComponent.prototype, "mode", {
        get: function () {
            return this._mode;
        },
        /**
         * Sets mode of [TdLoadingComponent] to LoadingMode.Determinate or LoadingMode.Indeterminate
         */
        set: function (mode) {
            this._defaultMode = mode;
        },
        enumerable: true,
        configurable: true
    });
    TdLoadingComponent.prototype.getHeight = function () {
        if (this.height) {
            return this.height + "px";
        }
        return '150px';
    };
    TdLoadingComponent.prototype.getCircleDiameter = function () {
        if (this.height) {
            var diameter = this.height * (2 / 3);
            if (diameter < 80) {
                return diameter + "px";
            }
        }
        return '80px';
    };
    TdLoadingComponent.prototype.isCircular = function () {
        return this.type === exports.LoadingType.Circular;
    };
    TdLoadingComponent.prototype.isLinear = function () {
        return this.type === exports.LoadingType.Linear;
    };
    TdLoadingComponent.prototype.inAnimationCompleted = function () {
        this._animationIn.next(undefined);
    };
    TdLoadingComponent.prototype.outAnimationCompleted = function () {
        var _this = this;
        /* little hack to reset the loader value and animation before removing it from DOM
        * else, the loader will appear with prev value when its registered again
        * and will do an animation going prev value to 0.
        */
        this._reset = false;
        this.value = 0;
        setTimeout(function () {
            _this._reset = true;
            _this._animationOut.next(undefined);
        });
    };
    /**
     * Starts in animation and returns an observable for completition event.
     */
    TdLoadingComponent.prototype.startInAnimation = function () {
        this.animation = false;
        /* need to switch back to the selected mode, so we have saved it in another variable
        *  and then recover it. (issue with protractor)
        */
        this._mode = this._defaultMode;
        return this._animationIn.asObservable();
    };
    /**
     * Starts out animation and returns an observable for completition event.
     */
    TdLoadingComponent.prototype.startOutAnimation = function () {
        this.animation = true;
        /* need to switch back and forth from determinate/indeterminate so the setInterval()
        * inside md-progress-circle stops and protractor doesnt timeout waiting to sync.
        */
        this._mode = exports.LoadingMode.Determinate;
        return this._animationOut.asObservable();
    };
    TdLoadingComponent = __decorate$12([
        _angular_core.Component({
            selector: 'td-loading',
            styles: [".td-loading.td-overlay { position: fixed; margin: 0; top: 0; left: 0; width: 100%; height: 100%; background: rgba(255, 255, 255, 0.9); z-index: 1000; } .td-loading.td-overlay md-progress-bar { position: fixed; top: 0; left: 0; right: 0; } "],
            template: "<div [tdFade]=\"animation\" (fadeOut)=\"outAnimationCompleted()\" (fadeIn)=\"inAnimationCompleted()\" [style.min-height]=\"getHeight()\" class=\"td-loading\" [class.td-overlay]=\"overlay\" layout=\"row\" layout-align=\"center center\" layout-padding flex> <md-progress-circle *ngIf=\"isCircular() && reset\"  [mode]=\"mode\" [value]=\"value\"  color=\"primary\"  [style.height]=\"getCircleDiameter()\" [style.width]=\"getCircleDiameter()\"> </md-progress-circle> <md-progress-bar *ngIf=\"isLinear() && reset\"  [mode]=\"mode\" [value]=\"value\" color=\"primary\"> </md-progress-bar> </div>",
        }), 
        __metadata$12('design:paramtypes', [])
    ], TdLoadingComponent);
    return TdLoadingComponent;
}());

var __decorate$11 = (window && window.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$11 = (window && window.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var TdLoadingService = (function () {
    function TdLoadingService(_componentFactoryResolver, _injector) {
        this._componentFactoryResolver = _componentFactoryResolver;
        this._injector = _injector;
        this._context = {};
        this._loadingSources = {};
        this._loadingObservables = {};
    }
    /**
     * params:
     * - options: ILoadingOptions {
     *     name: string;
     *     type?: LoadingType;
     * }
     * - viewContainerRef: ViewContainerRef
     *
     * Creates an fullscreen loading mask and attaches it to the viewContainerRef.
     * Only displayed when the mask has a request registered on it.
     */
    TdLoadingService.prototype.createOverlayComponent = function (options, viewContainerRef) {
        options.height = undefined;
        options.overlay = true;
        var loadingRef = this._createComponent(options);
        var loading = false;
        loadingRef.observable
            .subscribe(function (registered) {
            var instance = loadingRef.ref.instance;
            if (registered > 0 && !loading) {
                loading = true;
                viewContainerRef.insert(loadingRef.ref.hostView, 0);
                instance.startInAnimation();
            }
            else if (registered <= 0 && loading) {
                loading = false;
                var subs_1 = instance.startOutAnimation().subscribe(function () {
                    subs_1.unsubscribe();
                    viewContainerRef.detach(viewContainerRef.indexOf(loadingRef.ref.hostView));
                });
            }
        });
    };
    /**
     * params:
     * - options: ILoadingOptions {
     *     name: string;
     *     type?: LoadingType;
     * }
     * - viewContainerRef: ViewContainerRef
     * - templateRef: TemplateRef<Object>
     *
     * Creates an replace loading mask and attaches it to the viewContainerRef.
     * Replaces the templateRef with the mask when a request is registered on it.
     */
    TdLoadingService.prototype.createReplaceComponent = function (options, viewContainerRef, templateRef) {
        var nativeElement = templateRef.elementRef.nativeElement;
        options.height = nativeElement.nextElementSibling ?
            nativeElement.nextElementSibling.scrollHeight : undefined;
        options.overlay = false;
        var loadingRef = this._createComponent(options);
        var loading = false;
        loadingRef.observable
            .subscribe(function (registered) {
            var instance = loadingRef.ref.instance;
            if (registered > 0 && !loading) {
                loading = true;
                var index = viewContainerRef.indexOf(loadingRef.ref.hostView);
                if (index < 0) {
                    viewContainerRef.clear();
                    viewContainerRef.insert(loadingRef.ref.hostView, 0);
                }
                instance.startInAnimation();
            }
            else if (registered <= 0 && loading) {
                loading = false;
                var subs_2 = instance.startOutAnimation().subscribe(function () {
                    subs_2.unsubscribe();
                    viewContainerRef.createEmbeddedView(templateRef);
                    viewContainerRef.detach(viewContainerRef.indexOf(loadingRef.ref.hostView));
                });
            }
        });
    };
    /**
     * params:
     * - name: string
     *
     * Removes loading mask from service context.
     */
    TdLoadingService.prototype.removeComponent = function (name) {
        if (this._context[name]) {
            this._loadingSources[name] = undefined;
            delete this._loadingSources[name];
            this._context[name].loadingRef.destroy();
            this._context[name] = undefined;
            delete this._context[name];
        }
    };
    /**
     * params:
     * - name: string
     * - registers?: number
     * returns: true if successful
     *
     * Resolves a request for the loading mask referenced by the name parameter.
     * Can optionally pass registers argument to set a number of register calls.
     */
    TdLoadingService.prototype.register = function (name, registers) {
        if (registers === void 0) { registers = 1; }
        if (this._loadingSources[name]) {
            registers = registers < 1 ? 1 : registers;
            this._context[name].times += registers;
            this._loadingSources[name].next(this._context[name].times);
            return true;
        }
        return false;
    };
    /**
     * params:
     * - name: string
     * - resolves?: number
     * returns: true if successful
     *
     * Registers a request for the loading mask referenced by the name parameter.
     * Can optionally pass resolves argument to set a number of resolve calls.
     */
    TdLoadingService.prototype.resolve = function (name, resolves) {
        if (resolves === void 0) { resolves = 1; }
        if (this._loadingSources[name]) {
            resolves = resolves < 1 ? 1 : resolves;
            if (this._context[name].times > 0) {
                var times = this._context[name].times;
                times -= resolves;
                this._context[name].times = times < 0 ? 0 : times;
            }
            this._loadingSources[name].next(this._context[name].times);
            return true;
        }
        return false;
    };
    /**
     * params:
     * - name: string
     * - value: number
     * returns: true if successful
     *
     * Set value on a loading mask referenced by the name parameter.
     * Usage only available if its mode is 'determinate' and if loading is showing.
     */
    TdLoadingService.prototype.setValue = function (name, value) {
        if (this._loadingSources[name]) {
            var instance = this._context[name].loadingRef.instance;
            if (instance.mode === exports.LoadingMode.Determinate && !instance.animation) {
                instance.value = value;
                return true;
            }
        }
        return false;
    };
    /**
     * Creates a generic [TdLoadingComponent] and its context.
     * Returns a promise that resolves to a [ILoadingRef] with the created [ComponentRef] and its referenced [Observable].
     */
    TdLoadingService.prototype._createComponent = function (options) {
        var name = options.name;
        if (!name) {
            throw 'Name is required for Loading Component.';
        }
        if (!this._context[name] || options.overlay) {
            this._context[name] = {};
        }
        else {
            throw "Name duplication: Loading  Component name conflict with " + name + ".";
        }
        this._context[name].loadingRef = this._componentFactoryResolver
            .resolveComponentFactory(TdLoadingComponent).create(this._injector);
        this._context[name].times = 0;
        this._mapOptions(options, this._context[name].loadingRef.instance);
        var compRef = {
            observable: this._registerLoadingComponent(name),
            ref: this._context[name].loadingRef,
        };
        return compRef;
    };
    /**
     * Maps the [IInternalLoadingOptions] object to the [TdLoadingComponent] instance.
     */
    TdLoadingService.prototype._mapOptions = function (options, instance) {
        instance.overlay = options.overlay;
        if (options.type !== undefined) {
            instance.type = options.type;
        }
        if (options.height !== undefined) {
            instance.height = options.height;
        }
        if (options.mode !== undefined) {
            instance.mode = options.mode;
        }
    };
    /**
     * Creates an observable for the parameter name reference, and returns it.
     */
    TdLoadingService.prototype._registerLoadingComponent = function (name) {
        this._loadingSources[name] = new rxjs_Subject.Subject();
        this._loadingObservables[name] = this._loadingSources[name].asObservable();
        return this._loadingObservables[name];
    };
    TdLoadingService = __decorate$11([
        _angular_core.Injectable(), 
        __metadata$11('design:paramtypes', [_angular_core.ComponentFactoryResolver, _angular_core.Injector])
    ], TdLoadingService);
    return TdLoadingService;
}());

var __decorate$13 = (window && window.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$13 = (window && window.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var TdLoadingDirective = (function () {
    function TdLoadingDirective(_viewContainer, _templateRef, _loadingService) {
        this._viewContainer = _viewContainer;
        this._templateRef = _templateRef;
        this._loadingService = _loadingService;
    }
    Object.defineProperty(TdLoadingDirective.prototype, "name", {
        /**
         * tdLoading?: string
         * Name reference of the loading mask, used to register/resolve requests to the mask.
         */
        set: function (name) {
            this._name = name;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TdLoadingDirective.prototype, "type", {
        /**
         * loadingType?: LoadingType or ['linear' | 'circular']
         * Sets the type of loading mask depending on value.
         * Defaults to [LoadingType.Circular | 'circular'].
         */
        set: function (type) {
            switch (type) {
                case exports.LoadingType.Linear:
                    this._type = exports.LoadingType.Linear;
                    break;
                default:
                    this._type = exports.LoadingType.Circular;
                    break;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TdLoadingDirective.prototype, "mode", {
        /**
         * LoadingMode?: LoadingMode or ['determinate' | 'indeterminate']
         * Sets the mode of loading mask depending on value.
         * Defaults to [LoadingMode.Indeterminate | 'indeterminate'].
         */
        set: function (mode) {
            switch (mode) {
                case exports.LoadingMode.Determinate:
                    this._mode = exports.LoadingMode.Determinate;
                    break;
                default:
                    this._mode = exports.LoadingMode.Indeterminate;
                    break;
            }
        },
        enumerable: true,
        configurable: true
    });
    TdLoadingDirective.prototype.ngOnInit = function () {
        this._viewContainer.createEmbeddedView(this._templateRef);
        this._registerComponent();
    };
    TdLoadingDirective.prototype.ngOnDestroy = function () {
        this._loadingService.removeComponent(this._name);
    };
    /**
     * Creates [TdLoadingComponent] and attaches it to this directive's [ViewContainerRef].
     * Passes this directive's [TemplateRef] to detach/attach it from DOM when loading mask is on.
     */
    TdLoadingDirective.prototype._registerComponent = function () {
        if (!this._name) {
            throw 'Name is needed to register loading directive';
        }
        var options = {
            name: this._name,
            type: this._type,
            mode: this._mode,
        };
        this._loadingService.createReplaceComponent(options, this._viewContainer, this._templateRef);
    };
    __decorate$13([
        _angular_core.Input('tdLoading'), 
        __metadata$13('design:type', String), 
        __metadata$13('design:paramtypes', [String])
    ], TdLoadingDirective.prototype, "name", null);
    __decorate$13([
        _angular_core.Input('loadingType'), 
        __metadata$13('design:type', Number), 
        __metadata$13('design:paramtypes', [Number])
    ], TdLoadingDirective.prototype, "type", null);
    __decorate$13([
        _angular_core.Input('loadingMode'), 
        __metadata$13('design:type', Number), 
        __metadata$13('design:paramtypes', [Number])
    ], TdLoadingDirective.prototype, "mode", null);
    TdLoadingDirective = __decorate$13([
        _angular_core.Directive({
            selector: '[tdLoading]',
        }), 
        __metadata$13('design:paramtypes', [_angular_core.ViewContainerRef, _angular_core.TemplateRef, TdLoadingService])
    ], TdLoadingDirective);
    return TdLoadingDirective;
}());

var __decorate$14 = (window && window.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$14 = (window && window.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var TdExpansionPanelSummaryComponent = (function () {
    function TdExpansionPanelSummaryComponent() {
    }
    TdExpansionPanelSummaryComponent = __decorate$14([
        _angular_core.Component({
            selector: 'td-expansion-summary',
            template: '<ng-content></ng-content>',
        }), 
        __metadata$14('design:paramtypes', [])
    ], TdExpansionPanelSummaryComponent);
    return TdExpansionPanelSummaryComponent;
}());
var TdExpansionPanelComponent = (function () {
    function TdExpansionPanelComponent() {
        this._expand = false;
        this._disabled = false;
        /**
         * expanded?: function
         * Event emitted when [TdExpansionPanelComponent] is expanded.
         */
        this.expanded = new _angular_core.EventEmitter();
        /**
         * collapsed?: function
         * Event emitted when [TdExpansionPanelComponent] is collapsed.
         */
        this.collapsed = new _angular_core.EventEmitter();
    }
    Object.defineProperty(TdExpansionPanelComponent.prototype, "expand", {
        get: function () {
            return this._expand;
        },
        /**
         * expand?: boolean
         * Toggles [TdExpansionPanelComponent] between expand/collapse.
         */
        set: function (expand) {
            this._setExpand(expand);
        },
        enumerable: true,
        configurable: true
    });
    
    
    Object.defineProperty(TdExpansionPanelComponent.prototype, "disabled", {
        get: function () {
            return this._disabled;
        },
        /**
         * disabled?: boolean
         * Disables icon and header, blocks click event and sets [TdStepComponent] to deactive if 'true'.
         */
        set: function (disabled) {
            if (disabled && this._expand) {
                this._expand = false;
                this._onCollapsed();
            }
            this._disabled = disabled;
        },
        enumerable: true,
        configurable: true
    });
    
    
    /**
     * Method executed when [TdExpansionPanelComponent] is clicked.
     */
    TdExpansionPanelComponent.prototype.clickEvent = function () {
        this._setExpand(!this._expand);
    };
    
    /**
     * Method to change expand state internally and emit the [onExpanded] event if 'true' or [onCollapsed]
     * event if 'false'. (Blocked if [disabled] is 'true')
     */
    TdExpansionPanelComponent.prototype._setExpand = function (newExpand) {
        if (this._disabled) {
            return;
        }
        if (this._expand !== newExpand) {
            this._expand = newExpand;
            if (newExpand) {
                this._onExpanded();
            }
            else {
                this._onCollapsed();
            }
        }
    };
    
    TdExpansionPanelComponent.prototype._onExpanded = function () {
        this.expanded.emit(undefined);
    };
    
    TdExpansionPanelComponent.prototype._onCollapsed = function () {
        this.collapsed.emit(undefined);
    };
    
    __decorate$14([
        _angular_core.Input(), 
        __metadata$14('design:type', String)
    ], TdExpansionPanelComponent.prototype, "label", void 0);
    __decorate$14([
        _angular_core.Input(), 
        __metadata$14('design:type', String)
    ], TdExpansionPanelComponent.prototype, "sublabel", void 0);
    __decorate$14([
        _angular_core.Input('expand'), 
        __metadata$14('design:type', Boolean), 
        __metadata$14('design:paramtypes', [Boolean])
    ], TdExpansionPanelComponent.prototype, "expand", null);
    __decorate$14([
        _angular_core.Input('disabled'), 
        __metadata$14('design:type', Boolean), 
        __metadata$14('design:paramtypes', [Boolean])
    ], TdExpansionPanelComponent.prototype, "disabled", null);
    __decorate$14([
        _angular_core.Output(), 
        __metadata$14('design:type', _angular_core.EventEmitter)
    ], TdExpansionPanelComponent.prototype, "expanded", void 0);
    __decorate$14([
        _angular_core.Output(), 
        __metadata$14('design:type', _angular_core.EventEmitter)
    ], TdExpansionPanelComponent.prototype, "collapsed", void 0);
    TdExpansionPanelComponent = __decorate$14([
        _angular_core.Component({
            selector: 'td-expansion-panel',
            styles: [":host { background-color: #fff; display: block; box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2), 0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12); } :host .panel { transition: 1s all ease; margin: 0; } :host:first-of-type .td-expanded { margin-bottom: 16px; } :host:not(:first-of-type):not(:last-of-type) .td-expanded { margin-top: 16px; margin-bottom: 16px; } :host:last-of-type .td-expanded { margin-top: 16px; } :host md-nav-list:first-of-type, :host md-list:first-of-type { padding-top: 0; } .md-disabled, .md-disabled * { color: #9e9e9e; } md-nav-list { padding: 0; } md-icon { color: #9e9e9e; } .td-expansion-primary, .td-expansion-secondary { white-space: nowrap; overflow: hidden; text-overflow: ellipsis; margin-right: 5px; } .td-expansion-secondary { color: #616161; } "],
            template: "<div class=\"panel\"  [class.td-expanded]=\"expand\"> <md-nav-list> <a [tabIndex]=\"disabled? -1 : 0\" (keydown.enter)=\"clickEvent()\" (click)=\"clickEvent()\"        md-list-item> <div [class.md-disabled]=\"disabled\" layout=\"row\"  layout-align=\"start center\"  flex> <div class=\"md-subhead td-expansion-primary\" flex-gt-xs=\"33\">{{label || 'Click to expand '}}</div> <div class=\"md-body-1 td-expansion-secondary\">{{sublabel}}</div> <span flex></span> <md-icon *ngIf=\"!expand && !disabled\">keyboard_arrow_down</md-icon> <md-icon *ngIf=\"expand\">keyboard_arrow_up</md-icon> </div> </a> </md-nav-list> <div> <div [tdToggle]=\"!expand\"> <ng-content></ng-content> </div> <div [tdToggle]=\"expand\"> <ng-content select=\"td-expansion-summary\"></ng-content> </div> </div> </div>",
        }), 
        __metadata$14('design:paramtypes', [])
    ], TdExpansionPanelComponent);
    return TdExpansionPanelComponent;
}());

var __decorate$15 = (window && window.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$15 = (window && window.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var TdDialogTitleDirective = (function () {
    function TdDialogTitleDirective() {
    }
    TdDialogTitleDirective = __decorate$15([
        _angular_core.Directive({ selector: 'td-dialog-title' }), 
        __metadata$15('design:paramtypes', [])
    ], TdDialogTitleDirective);
    return TdDialogTitleDirective;
}());
var TdDialogContentDirective = (function () {
    function TdDialogContentDirective() {
    }
    TdDialogContentDirective = __decorate$15([
        _angular_core.Directive({ selector: 'td-dialog-content' }), 
        __metadata$15('design:paramtypes', [])
    ], TdDialogContentDirective);
    return TdDialogContentDirective;
}());
var TdDialogActionsDirective = (function () {
    function TdDialogActionsDirective() {
    }
    TdDialogActionsDirective = __decorate$15([
        _angular_core.Directive({ selector: 'td-dialog-actions' }), 
        __metadata$15('design:paramtypes', [])
    ], TdDialogActionsDirective);
    return TdDialogActionsDirective;
}());
var TdDialogComponent = (function () {
    function TdDialogComponent() {
    }
    TdDialogComponent.prototype.ngAfterContentInit = function () {
        if (this.dialogTitle.length > 1) {
            throw 'Duplicate td-dialog-title component at in td-dialog.';
        }
        if (this.dialogContent.length > 1) {
            throw 'Duplicate td-dialog-content component at in td-dialog.';
        }
        if (this.dialogActions.length > 1) {
            throw 'Duplicate td-dialog-actions component at in td-dialog.';
        }
    };
    __decorate$15([
        _angular_core.ContentChildren(TdDialogTitleDirective), 
        __metadata$15('design:type', _angular_core.QueryList)
    ], TdDialogComponent.prototype, "dialogTitle", void 0);
    __decorate$15([
        _angular_core.ContentChildren(TdDialogContentDirective), 
        __metadata$15('design:type', _angular_core.QueryList)
    ], TdDialogComponent.prototype, "dialogContent", void 0);
    __decorate$15([
        _angular_core.ContentChildren(TdDialogActionsDirective), 
        __metadata$15('design:type', _angular_core.QueryList)
    ], TdDialogComponent.prototype, "dialogActions", void 0);
    TdDialogComponent = __decorate$15([
        _angular_core.Component({
            selector: 'td-dialog',
            template: "<div class=\"td-dialog-wrapper\"> <h3 class=\"td-dialog-title md-title\" *ngIf=\"dialogTitle.length > 0\"> <ng-content select=\"td-dialog-title\"></ng-content> </h3> <div class=\"td-dialog-content\" *ngIf=\"dialogContent.length > 0\"> <ng-content select=\"td-dialog-content\"></ng-content> </div> <div class=\"td-dialog-actions\" *ngIf=\"dialogActions.length > 0\" layout=\"row\"> <span flex></span> <ng-content select=\"td-dialog-actions\"></ng-content> </div> </div>",
            styles: [".td-dialog-title { margin-top: 0; margin-bottom: 20px; } .td-dialog-content { margin-bottom: 16px; } .td-dialog-actions { position: relative; top: 16px; left: 16px; } :host { display: block; } :host .td-dialog-actions /deep/ button { text-transform: uppercase; margin-left: 8px; padding-left: 8px; padding-right: 8px; min-width: 64px; } "],
        }), 
        __metadata$15('design:paramtypes', [])
    ], TdDialogComponent);
    return TdDialogComponent;
}());

var __decorate$16 = (window && window.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$16 = (window && window.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var TdAlertDialogComponent = (function () {
    function TdAlertDialogComponent(_dialogRef) {
        this._dialogRef = _dialogRef;
        this.closeButton = 'CLOSE';
    }
    TdAlertDialogComponent.prototype.close = function () {
        this._dialogRef.close();
    };
    TdAlertDialogComponent = __decorate$16([
        _angular_core.Component({
            selector: 'td-alert-dialog',
            template: "<td-dialog> <td-dialog-title *ngIf=\"title\"> {{title}} </td-dialog-title> <td-dialog-content class=\"md-subhead tc-grey-700\"> {{message}} </td-dialog-content> <td-dialog-actions> <button md-button color=\"accent\" (click)=\"close()\">{{closeButton}}</button> </td-dialog-actions> </td-dialog>",
            styles: ["@media (min-width: 600px) { td-dialog { width: 400px; } } @media (max-width: 599px) { td-dialog { width: 250px; } } "],
        }), 
        __metadata$16('design:paramtypes', [_angular_material.MdDialogRef])
    ], TdAlertDialogComponent);
    return TdAlertDialogComponent;
}());

var __decorate$17 = (window && window.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$17 = (window && window.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var TdConfirmDialogComponent = (function () {
    function TdConfirmDialogComponent(_dialogRef) {
        this._dialogRef = _dialogRef;
        this.cancelButton = 'CANCEL';
        this.acceptButton = 'ACCEPT';
    }
    TdConfirmDialogComponent.prototype.cancel = function () {
        this._dialogRef.close(false);
    };
    TdConfirmDialogComponent.prototype.accept = function () {
        this._dialogRef.close(true);
    };
    TdConfirmDialogComponent = __decorate$17([
        _angular_core.Component({
            selector: 'td-confirm-dialog',
            template: "<td-dialog> <td-dialog-title *ngIf=\"title\"> {{title}} </td-dialog-title> <td-dialog-content class=\"md-subhead tc-grey-700\"> {{message}} </td-dialog-content> <td-dialog-actions> <button md-button (click)=\"cancel()\">{{cancelButton}}</button> <button md-button color=\"accent\" (click)=\"accept()\">{{acceptButton}}</button> </td-dialog-actions> </td-dialog>",
            styles: ["@media (min-width: 600px) { td-dialog { width: 400px; } } @media (max-width: 599px) { td-dialog { width: 250px; } } "],
        }), 
        __metadata$17('design:paramtypes', [_angular_material.MdDialogRef])
    ], TdConfirmDialogComponent);
    return TdConfirmDialogComponent;
}());

var __decorate$18 = (window && window.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$18 = (window && window.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var TdPromptDialogComponent = (function () {
    function TdPromptDialogComponent(_dialogRef) {
        this._dialogRef = _dialogRef;
        this.cancelButton = 'CANCEL';
        this.acceptButton = 'ACCEPT';
    }
    TdPromptDialogComponent.prototype.cancel = function () {
        this._dialogRef.close(undefined);
    };
    TdPromptDialogComponent.prototype.accept = function () {
        this._dialogRef.close(this.value);
    };
    TdPromptDialogComponent = __decorate$18([
        _angular_core.Component({
            selector: 'td-prompt-dialog',
            template: "<td-dialog> <td-dialog-title *ngIf=\"title\"> {{title}} </td-dialog-title> <td-dialog-content layout=\"column\" class=\"md-subhead tc-grey-700\"> {{message}} <form #form=\"ngForm\" layout=\"row\" flex> <md-input [(ngModel)]=\"value\" name=\"value\" required flex></md-input> </form> </td-dialog-content> <td-dialog-actions> <button md-button (click)=\"cancel()\">{{cancelButton}}</button> <button md-button color=\"accent\" [disabled]=\"!form.valid\" (click)=\"accept()\">{{acceptButton}}</button> </td-dialog-actions> </td-dialog>",
            styles: ["@media (min-width: 600px) { td-dialog { width: 400px; } } @media (max-width: 599px) { td-dialog { width: 250px; } } "],
        }), 
        __metadata$18('design:paramtypes', [_angular_material.MdDialogRef])
    ], TdPromptDialogComponent);
    return TdPromptDialogComponent;
}());

var __decorate$19 = (window && window.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$19 = (window && window.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var TdDialogService = (function () {
    function TdDialogService(_dialogService) {
        this._dialogService = _dialogService;
    }
    /**
     * params:
     * - viewContainerRef: ViewContainerRef
     *
     * Sets a detaulf ViewContainerRef object to which all dialogs will belong to.
     */
    TdDialogService.prototype.setDefaultViewContainerRef = function (viewContainerRef) {
        this._viewContainerRef = viewContainerRef;
    };
    /**
     * params:
     * - config: IAlertConfig {
     *     message: string;
     *     title?: string;
     *     viewContainerRef?: ViewContainerRef;
     *     closeButton?: string;
     * }
     *
     * Opens an alert dialog with the provided config.
     * Returns an MdDialogRef<TdAlertDialogComponent> object.
     */
    TdDialogService.prototype.openAlert = function (config) {
        var dialogConfig = this._createConfig(config.viewContainerRef);
        var dialogRef = this._dialogService.open(TdAlertDialogComponent, dialogConfig);
        var alertDialogComponent = dialogRef.componentInstance;
        alertDialogComponent.title = config.title;
        alertDialogComponent.message = config.message;
        if (config.closeButton) {
            alertDialogComponent.closeButton = config.closeButton;
        }
        return dialogRef;
    };
    /**
     * params:
     * - config: IConfirmConfig {
     *     message: string;
     *     title?: string;
     *     viewContainerRef?: ViewContainerRef;
     *     acceptButton?: string;
     *     cancelButton?: string;
     * }
     *
     * Opens a confirm dialog with the provided config.
     * Returns an MdDialogRef<TdConfirmDialogComponent> object.
     */
    TdDialogService.prototype.openConfirm = function (config) {
        var dialogConfig = this._createConfig(config.viewContainerRef);
        var dialogRef = this._dialogService.open(TdConfirmDialogComponent, dialogConfig);
        var confirmDialogComponent = dialogRef.componentInstance;
        confirmDialogComponent.title = config.title;
        confirmDialogComponent.message = config.message;
        if (config.acceptButton) {
            confirmDialogComponent.acceptButton = config.acceptButton;
        }
        if (config.cancelButton) {
            confirmDialogComponent.cancelButton = config.cancelButton;
        }
        return dialogRef;
    };
    /**
     * params:
     * - config: IPromptConfig {
     *     message: string;
     *     title?: string;
     *     value?: string;
     *     viewContainerRef?: ViewContainerRef;
     *     acceptButton?: string;
     *     cancelButton?: string;
     * }
     *
     * Opens a prompt dialog with the provided config.
     * Returns an MdDialogRef<TdPromptDialogComponent> object.
     */
    TdDialogService.prototype.openPrompt = function (config) {
        var dialogConfig = this._createConfig(config.viewContainerRef);
        var dialogRef = this._dialogService.open(TdPromptDialogComponent, dialogConfig);
        var promptDialogComponent = dialogRef.componentInstance;
        promptDialogComponent.title = config.title;
        promptDialogComponent.message = config.message;
        promptDialogComponent.value = config.value;
        if (config.acceptButton) {
            promptDialogComponent.acceptButton = config.acceptButton;
        }
        if (config.cancelButton) {
            promptDialogComponent.cancelButton = config.cancelButton;
        }
        return dialogRef;
    };
    TdDialogService.prototype._createConfig = function (viewContainerRef) {
        var dialogConfig = new _angular_material.MdDialogConfig();
        dialogConfig.viewContainerRef = viewContainerRef ? viewContainerRef : this._viewContainerRef;
        if (!dialogConfig.viewContainerRef) {
            throw 'ViewContainerRef was not provided for dialog.';
        }
        return dialogConfig;
    };
    TdDialogService = __decorate$19([
        _angular_core.Injectable(), 
        __metadata$19('design:paramtypes', [_angular_material.MdDialog])
    ], TdDialogService);
    return TdDialogService;
}());

var __decorate$20 = (window && window.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$20 = (window && window.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var TdToggleDirective = (function () {
    function TdToggleDirective(_renderer, _element) {
        this._renderer = _renderer;
        this._element = _element;
        /**
         * duration?: number
         * Sets duration of toggle animation in miliseconds.
         * Defaults to 150 ms.
         */
        this.duration = 150;
        this._defaultDisplay = this._element.nativeElement.style.display;
    }
    Object.defineProperty(TdToggleDirective.prototype, "state", {
        /**
         * tdToggle: boolean
         * Toggles element, hides if its 'true', shows if its 'false'.
         */
        set: function (state) {
            this._state = state;
            clearTimeout(this._timeoutNumber);
            if (state) {
                this.hide();
            }
            else {
                this.show();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TdToggleDirective.prototype, "ariaExpandedBinding", {
        /**
         * Binds native 'aria-expanded' attribute.
         */
        get: function () {
            return !this._state;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TdToggleDirective.prototype, "ariaHiddenBinding", {
        /**
         * Binds native 'aria-hidden' attribute.
         */
        get: function () {
            return this._state;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TdToggleDirective.prototype, "hiddenBinding", {
        /**
         * Binds 'hidden' attribute.
         */
        get: function () {
            return this._hiddenState ? true : undefined;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Hides element: sets "display:[default]" so animation is shown,
     * starts animation and adds "display:'none'" style at the end.
     */
    TdToggleDirective.prototype.hide = function () {
        var _this = this;
        this._renderer.setElementStyle(this._element.nativeElement, 'display', this._defaultDisplay);
        var animation = this._renderer
            .animate(this._element.nativeElement, undefined, [{
                styles: {
                    styles: [
                        { 'height': this._element.nativeElement.scrollHeight + 'px' },
                        { 'overflow': 'hidden' },
                    ],
                },
                offset: 0,
            }, {
                styles: {
                    styles: [
                        { 'height': 0 },
                        { 'overflow': 'hidden' },
                    ],
                },
                offset: 1,
            },
        ], this.duration, 0, 'ease-in');
        animation.play();
        /**
         * Using timeout instead of onComplete since there is a bug if you start another animation
         * before the previous one ends. The onComplete event is not executed.
         * e.g. hide event started before show event is completed.
         */
        this._timeoutNumber = setTimeout(function () {
            _this._renderer.setElementStyle(_this._element.nativeElement, 'display', 'none');
            _this._hiddenState = _this._state;
        }, this.duration);
    };
    /**
     * Shows element: sets "display:[default]" so animation is shown,
     * starts animation and adds "display:[default]" style again at the end.
     */
    TdToggleDirective.prototype.show = function () {
        var _this = this;
        this._hiddenState = this._state;
        this._renderer.setElementStyle(this._element.nativeElement, 'display', this._defaultDisplay);
        var startingAnimation = this._renderer
            .animate(this._element.nativeElement, undefined, [{
                styles: {
                    styles: [
                        { 'overflow': 'hidden' },
                    ],
                },
                offset: 0,
            }, {
                styles: {
                    styles: [
                        { 'overflow': 'hidden' },
                    ],
                },
                offset: 1,
            },
        ], 0, 0, 'ease-in');
        startingAnimation.play();
        startingAnimation.onDone(function () {
            var animation = _this._renderer
                .animate(_this._element.nativeElement, undefined, [{
                    styles: {
                        styles: [
                            { 'height': 0 },
                            { 'overflow': 'hidden' },
                        ],
                    },
                    offset: 0,
                }, {
                    styles: {
                        styles: [
                            { 'height': _this._element.nativeElement.scrollHeight + 'px' },
                            { 'overflow': 'hidden' },
                        ],
                    },
                    offset: 1,
                },
            ], _this.duration, 0, 'ease-in');
            animation.play();
            /**
             * Using timeout instead of onComplete since there is a bug if you start another animation
             * before the previous one ends. The onComplete event is not executed.
             * e.g. hide event started before show event is completed.
             */
            _this._timeoutNumber = setTimeout(function () {
                _this._renderer.setElementStyle(_this._element.nativeElement, 'display', _this._defaultDisplay);
            }, _this.duration);
        });
    };
    __decorate$20([
        _angular_core.Input(), 
        __metadata$20('design:type', Number)
    ], TdToggleDirective.prototype, "duration", void 0);
    __decorate$20([
        _angular_core.Input('tdToggle'), 
        __metadata$20('design:type', Boolean), 
        __metadata$20('design:paramtypes', [Boolean])
    ], TdToggleDirective.prototype, "state", null);
    __decorate$20([
        _angular_core.HostBinding('attr.aria-expanded'), 
        __metadata$20('design:type', Boolean)
    ], TdToggleDirective.prototype, "ariaExpandedBinding", null);
    __decorate$20([
        _angular_core.HostBinding('attr.aria-hidden'), 
        __metadata$20('design:type', Boolean)
    ], TdToggleDirective.prototype, "ariaHiddenBinding", null);
    __decorate$20([
        _angular_core.HostBinding('hidden'), 
        __metadata$20('design:type', Boolean)
    ], TdToggleDirective.prototype, "hiddenBinding", null);
    TdToggleDirective = __decorate$20([
        _angular_core.Directive({
            selector: '[tdToggle]',
        }), 
        __metadata$20('design:paramtypes', [_angular_core.Renderer, _angular_core.ElementRef])
    ], TdToggleDirective);
    return TdToggleDirective;
}());

var __decorate$21 = (window && window.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$21 = (window && window.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var TdFadeDirective = (function () {
    function TdFadeDirective(_renderer, _element) {
        this._renderer = _renderer;
        this._element = _element;
        /**
         * duration?: number
         * Sets duration of fade animation in miliseconds.
         * Defaults to 150 ms.
         */
        this.duration = 150;
        /**
         * fadeIn?: function
         * Method to be executed when fadeIn animation ends.
         */
        this.fadeIn = new _angular_core.EventEmitter();
        /**
         * fadeOut?: function
         * Method to be executed when fadeOut animation ends.
         */
        this.fadeOut = new _angular_core.EventEmitter();
        this._defaultDisplay = this._element.nativeElement.style.display;
        this._defaultOpacity = !this._element.nativeElement.style.opacity ? 1 : this._element.nativeElement.style.opacity;
    }
    Object.defineProperty(TdFadeDirective.prototype, "state", {
        /**
         * tdFade: boolean
         * Fades element, FadesOut if its 'true', FadesIn if its 'false'.
         */
        set: function (state) {
            this._state = state;
            clearTimeout(this._timeoutNumber);
            if (state) {
                this.hide();
            }
            else {
                this.show();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TdFadeDirective.prototype, "ariaExpandedBinding", {
        /**
         * Binds native 'aria-expanded' attribute.
         */
        get: function () {
            return !this._state;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TdFadeDirective.prototype, "ariaHiddenBinding", {
        /**
         * Binds native 'aria-hidden' attribute.
         */
        get: function () {
            return this._state;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TdFadeDirective.prototype, "hiddenBinding", {
        /**
         * Binds 'hidden' attribute.
         */
        get: function () {
            return this._hiddenState ? true : undefined;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Hides element: sets "display:[default]" so animation is shown,
     * starts animation and adds "display:'none'" style at the end.
     */
    TdFadeDirective.prototype.hide = function () {
        var _this = this;
        this._renderer.setElementStyle(this._element.nativeElement, 'display', this._defaultDisplay);
        var animation = this._renderer
            .animate(this._element.nativeElement, undefined, [{
                styles: {
                    styles: [{ 'opacity': 1 }],
                },
                offset: 0,
            }, {
                styles: {
                    styles: [{ 'opacity': 0 }],
                },
                offset: 1,
            },
        ], this.duration, 0, 'ease-in');
        animation.play();
        /**
         * Using timeout instead of onComplete since there is a bug if you start another animation
         * before the previous one ends. The onComplete event is not executed.
         * e.g.hide event started before show event is completed.
         */
        this._timeoutNumber = setTimeout(function () {
            setTimeout(function () {
                _this._renderer.setElementStyle(_this._element.nativeElement, 'display', 'none');
            }, 0);
            _this._hiddenState = _this._state;
            _this.fadeOut.emit(undefined);
        }, this.duration);
    };
    /**
     * Shows element: sets "display:[default]" so animation is shown,
     * starts animation and adds "display:[default]" style again at the end.
     */
    TdFadeDirective.prototype.show = function () {
        var _this = this;
        this._hiddenState = this._state;
        this._renderer.setElementStyle(this._element.nativeElement, 'display', this._defaultDisplay);
        var animation = this._renderer
            .animate(this._element.nativeElement, undefined, [{
                styles: {
                    styles: [{ 'opacity': 0 }],
                },
                offset: 0,
            }, {
                styles: {
                    styles: [{ 'opacity': 1 }],
                },
                offset: 1,
            },
        ], this.duration, 0, 'ease-in');
        animation.play();
        /**
         * Using timeout instead of onComplete since there is a bug if you start another animation
         * before the previous one ends. The onComplete event is not executed.
         * e.g. hide event started before show event is completed.
         */
        this._timeoutNumber = setTimeout(function () {
            _this._renderer.setElementStyle(_this._element.nativeElement, 'display', _this._defaultDisplay);
            _this.fadeIn.emit(undefined);
        }, this.duration);
    };
    __decorate$21([
        _angular_core.Input(), 
        __metadata$21('design:type', Number)
    ], TdFadeDirective.prototype, "duration", void 0);
    __decorate$21([
        _angular_core.Input('tdFade'), 
        __metadata$21('design:type', Boolean), 
        __metadata$21('design:paramtypes', [Boolean])
    ], TdFadeDirective.prototype, "state", null);
    __decorate$21([
        _angular_core.Output('fadeIn'), 
        __metadata$21('design:type', _angular_core.EventEmitter)
    ], TdFadeDirective.prototype, "fadeIn", void 0);
    __decorate$21([
        _angular_core.Output('fadeOut'), 
        __metadata$21('design:type', _angular_core.EventEmitter)
    ], TdFadeDirective.prototype, "fadeOut", void 0);
    __decorate$21([
        _angular_core.HostBinding('attr.aria-expanded'), 
        __metadata$21('design:type', Boolean)
    ], TdFadeDirective.prototype, "ariaExpandedBinding", null);
    __decorate$21([
        _angular_core.HostBinding('attr.aria-hidden'), 
        __metadata$21('design:type', Boolean)
    ], TdFadeDirective.prototype, "ariaHiddenBinding", null);
    __decorate$21([
        _angular_core.HostBinding('hidden'), 
        __metadata$21('design:type', Boolean)
    ], TdFadeDirective.prototype, "hiddenBinding", null);
    TdFadeDirective = __decorate$21([
        _angular_core.Directive({
            selector: '[tdFade]',
        }), 
        __metadata$21('design:paramtypes', [_angular_core.Renderer, _angular_core.ElementRef])
    ], TdFadeDirective);
    return TdFadeDirective;
}());

var __decorate$22 = (window && window.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$22 = (window && window.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (window && window.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var TdAutoTrimDirective = (function () {
    function TdAutoTrimDirective(_model) {
        this._model = _model;
    }
    /**
     * Listens to host's (blur) event and trims value.
     */
    TdAutoTrimDirective.prototype.onBlur = function (event) {
        if (this._model && this._model.value && typeof (this._model.value) === 'string') {
            this._model.update.emit(this._model.value.trim());
        }
    };
    __decorate$22([
        _angular_core.HostListener('blur', ['$event']), 
        __metadata$22('design:type', Function), 
        __metadata$22('design:paramtypes', [Event]), 
        __metadata$22('design:returntype', void 0)
    ], TdAutoTrimDirective.prototype, "onBlur", null);
    TdAutoTrimDirective = __decorate$22([
        _angular_core.Directive({
            selector: '[tdAutoTrim]',
        }),
        __param(0, _angular_core.Optional()),
        __param(0, _angular_core.Host()), 
        __metadata$22('design:paramtypes', [_angular_forms.NgModel])
    ], TdAutoTrimDirective);
    return TdAutoTrimDirective;
}());

var __decorate$24 = (window && window.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$24 = (window && window.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var NUMBER_INPUT_REQUIRED_VALIDATOR = {
    provide: _angular_forms.NG_VALIDATORS,
    useExisting: _angular_core.forwardRef(function () { return TdNumberRequiredValidator; }),
    multi: true,
};
var TdNumberRequiredValidator = (function () {
    function TdNumberRequiredValidator() {
    }
    TdNumberRequiredValidator.validate = function (c) {
        return (Number.isNaN(c.value)) ?
            { required: true } :
            undefined;
    };
    TdNumberRequiredValidator.prototype.validate = function (c) {
        return TdNumberRequiredValidator.validate(c);
    };
    TdNumberRequiredValidator = __decorate$24([
        _angular_core.Directive({
            selector: "[type=number][required][formControlName],\n             [type=number][required][formControl],\n             [type=number][required][ngModel]",
            providers: [NUMBER_INPUT_REQUIRED_VALIDATOR],
        }), 
        __metadata$24('design:paramtypes', [])
    ], TdNumberRequiredValidator);
    return TdNumberRequiredValidator;
}());

var __decorate$23 = (window && window.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$23 = (window && window.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var MIN_VALIDATOR = {
    provide: _angular_forms.NG_VALIDATORS,
    useExisting: _angular_core.forwardRef(function () { return TdMinValidator; }),
    multi: true,
};
var TdMinValidator = (function () {
    function TdMinValidator() {
    }
    Object.defineProperty(TdMinValidator.prototype, "min", {
        set: function (min) {
            this._validator = TdMinValidator.validate(min);
        },
        enumerable: true,
        configurable: true
    });
    TdMinValidator.validate = function (minValue) {
        return function (c) {
            if (!!_angular_forms.Validators.required(c) || !!TdNumberRequiredValidator.validate(c) || (!minValue && minValue !== 0)) {
                return undefined;
            }
            var v = c.value;
            return v < minValue ?
                { min: { minValue: minValue, actualValue: v } } :
                undefined;
        };
    };
    
    TdMinValidator.prototype.validate = function (c) {
        return this._validator(c);
    };
    
    __decorate$23([
        _angular_core.Input('min'), 
        __metadata$23('design:type', Number), 
        __metadata$23('design:paramtypes', [Number])
    ], TdMinValidator.prototype, "min", null);
    TdMinValidator = __decorate$23([
        _angular_core.Directive({
            selector: '[min][formControlName],[min][formControl],[min][ngModel]',
            providers: [MIN_VALIDATOR],
        }), 
        __metadata$23('design:paramtypes', [])
    ], TdMinValidator);
    return TdMinValidator;
}());

var __decorate$25 = (window && window.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$25 = (window && window.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var MAX_VALIDATOR = {
    provide: _angular_forms.NG_VALIDATORS,
    useExisting: _angular_core.forwardRef(function () { return TdMaxValidator; }),
    multi: true,
};
var TdMaxValidator = (function () {
    function TdMaxValidator() {
    }
    Object.defineProperty(TdMaxValidator.prototype, "max", {
        set: function (max) {
            this._validator = TdMaxValidator.validate(max);
        },
        enumerable: true,
        configurable: true
    });
    TdMaxValidator.validate = function (maxValue) {
        return function (c) {
            if (!!_angular_forms.Validators.required(c) || !!TdNumberRequiredValidator.validate(c) || (!maxValue && maxValue !== 0)) {
                return undefined;
            }
            var v = c.value;
            return v > maxValue ?
                { max: { maxValue: maxValue, actualValue: v } } :
                undefined;
        };
    };
    
    TdMaxValidator.prototype.validate = function (c) {
        return this._validator(c);
    };
    
    __decorate$25([
        _angular_core.Input('max'), 
        __metadata$25('design:type', Number), 
        __metadata$25('design:paramtypes', [Number])
    ], TdMaxValidator.prototype, "max", null);
    TdMaxValidator = __decorate$25([
        _angular_core.Directive({
            selector: '[max][formControlName],[max][formControl],[max][ngModel]',
            providers: [MAX_VALIDATOR],
        }), 
        __metadata$25('design:paramtypes', [])
    ], TdMaxValidator);
    return TdMaxValidator;
}());

var __decorate$26 = (window && window.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$26 = (window && window.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var TdOrderByPipe = (function () {
    function TdOrderByPipe() {
    }
    TdOrderByPipe.prototype.transform = function (array, args) {
        if (array) {
            var orderByValue_1 = args[0];
            var byVal_1 = 1;
            if (orderByValue_1.charAt(0) === '!') {
                byVal_1 = -1;
                orderByValue_1 = orderByValue_1.substring(1);
            }
            array.sort(function (a, b) {
                if (a[orderByValue_1] < b[orderByValue_1]) {
                    return -1 * byVal_1;
                }
                else if (a[orderByValue_1] > b[orderByValue_1]) {
                    return 1 * byVal_1;
                }
                else {
                    return 0;
                }
            });
            return array;
        }
    };
    TdOrderByPipe = __decorate$26([
        _angular_core.Pipe({
            name: 'tdOrderby',
        }), 
        __metadata$26('design:paramtypes', [])
    ], TdOrderByPipe);
    return TdOrderByPipe;
}());

var __decorate$27 = (window && window.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$27 = (window && window.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var TdTimeAgoPipe = (function () {
    function TdTimeAgoPipe() {
    }
    TdTimeAgoPipe.prototype.transform = function (time, reference) {
        // Convert time to date object if not already
        time = new Date(time);
        var ref = new Date(reference);
        // If not a valid timestamp, return 'Invalid Date'
        if (!time.getTime()) {
            return 'Invalid Date';
        }
        // For unit testing, we need to be able to declare a static start time
        // for calculations, or else speed of tests can bork.
        var startTime = isNaN(ref.getTime()) ? Date.now() : ref.getTime();
        var diff = Math.floor((startTime - time.getTime()) / 1000);
        if (diff < 2) {
            return '1 second ago';
        }
        if (diff < 60) {
            return Math.floor(diff) + ' seconds ago';
        }
        // Minutes
        diff = diff / 60;
        if (diff < 2) {
            return '1 minute ago';
        }
        if (diff < 60) {
            return Math.floor(diff) + ' minutes ago';
        }
        // Hours
        diff = diff / 60;
        if (diff < 2) {
            return '1 hour ago';
        }
        if (diff < 24) {
            return Math.floor(diff) + ' hours ago';
        }
        // Days
        diff = diff / 24;
        if (diff < 2) {
            return '1 day ago';
        }
        if (diff < 30) {
            return Math.floor(diff) + ' days ago';
        }
        // Months
        diff = diff / 30;
        if (diff < 2) {
            return '1 month ago';
        }
        if (diff < 12) {
            return Math.floor(diff) + ' months ago';
        }
        // Years
        diff = diff / 12;
        if (diff < 2) {
            return '1 year ago';
        }
        else {
            return Math.floor(diff) + ' years ago';
        }
    };
    TdTimeAgoPipe = __decorate$27([
        _angular_core.Pipe({
            name: 'timeAgo',
        }), 
        __metadata$27('design:paramtypes', [])
    ], TdTimeAgoPipe);
    return TdTimeAgoPipe;
}());

var __decorate$28 = (window && window.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$28 = (window && window.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var TdTimeDifferencePipe = (function () {
    function TdTimeDifferencePipe() {
    }
    TdTimeDifferencePipe.prototype.transform = function (start, end) {
        var startTime = new Date(start);
        var endTime;
        if (end !== undefined) {
            endTime = new Date(end);
        }
        else {
            endTime = new Date();
        }
        if (!startTime.getTime() || !endTime.getTime()) {
            return 'Invalid Date';
        }
        var diff = Math.floor((endTime.getTime() - startTime.getTime()) / 1000);
        var days = Math.floor(diff / (60 * 60 * 24));
        diff = diff - (days * (60 * 60 * 24));
        var hours = Math.floor(diff / (60 * 60));
        diff = diff - (hours * (60 * 60));
        var minutes = Math.floor(diff / (60));
        diff -= minutes * (60);
        var seconds = diff;
        var pad = '00';
        var daysFormatted = '';
        if (days > 0 && days < 2) {
            daysFormatted = ' day - ';
        }
        else if (days > 1) {
            daysFormatted = ' days - ';
        }
        return (days > 0 ? days + daysFormatted : daysFormatted) +
            pad.substring(0, pad.length - (hours + '').length) + hours + ':' +
            pad.substring(0, pad.length - (minutes + '').length) + minutes + ':' +
            pad.substring(0, pad.length - (seconds + '').length) + seconds;
    };
    TdTimeDifferencePipe = __decorate$28([
        _angular_core.Pipe({
            name: 'timeDifference',
        }), 
        __metadata$28('design:paramtypes', [])
    ], TdTimeDifferencePipe);
    return TdTimeDifferencePipe;
}());

var __decorate$29 = (window && window.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$29 = (window && window.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var TdBytesPipe = (function () {
    function TdBytesPipe() {
    }
    /* `bytes` needs to be `any` or TypeScript complains
    Tried both `number` and `number | string` */
    TdBytesPipe.prototype.transform = function (bytes, precision) {
        if (precision === void 0) { precision = 2; }
        if (bytes === 0) {
            return '0 B';
        }
        else if (isNaN(parseInt(bytes, 10))) {
            /* If not a valid number, return 'Invalid Number' */
            return 'Invalid Number';
        }
        var k = 1000;
        var sizes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
        var i = Math.floor(Math.log(bytes) / Math.log(k));
        // if less than 1
        if (i < 0) {
            return 'Invalid Number';
        }
        return parseFloat((bytes / Math.pow(k, i)).toFixed(precision)) + ' ' + sizes[i];
    };
    TdBytesPipe = __decorate$29([
        _angular_core.Pipe({
            name: 'bytes',
        }), 
        __metadata$29('design:paramtypes', [])
    ], TdBytesPipe);
    return TdBytesPipe;
}());

var __decorate$30 = (window && window.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$30 = (window && window.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var TdDigitsPipe = (function () {
    function TdDigitsPipe() {
    }
    /* `digits` needs to be type `digits: any` or TypeScript complains */
    TdDigitsPipe.prototype.transform = function (digits, precision) {
        if (precision === void 0) { precision = 1; }
        if (digits === 0) {
            return '0';
        }
        else if (isNaN(parseInt(digits, 10))) {
            /* If not a valid number, return 'Invalid Number' */
            return 'Invalid Number';
        }
        else if (digits < 1) {
            return digits;
        }
        var k = 1000;
        var sizes = ['', 'K', 'M', 'B', 'T', 'Q'];
        var i = Math.floor(Math.log(digits) / Math.log(k));
        var size = sizes[i];
        return parseFloat((digits / Math.pow(k, i)).toFixed(precision)) + (size ? ' ' + size : '');
    };
    TdDigitsPipe = __decorate$30([
        _angular_core.Pipe({
            name: 'digits',
        }), 
        __metadata$30('design:paramtypes', [])
    ], TdDigitsPipe);
    return TdDigitsPipe;
}());

var __decorate$31 = (window && window.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$31 = (window && window.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var TdTruncatePipe = (function () {
    function TdTruncatePipe() {
    }
    TdTruncatePipe.prototype.transform = function (text, length) {
        if (typeof text !== 'string') {
            return '';
        }
        // Truncate
        var truncated = text.substr(0, length);
        if (text.length > length) {
            if (truncated.lastIndexOf(' ') > 0) {
                truncated = truncated.trim();
            }
            truncated += '…';
        }
        return truncated;
    };
    TdTruncatePipe = __decorate$31([
        _angular_core.Pipe({
            name: 'truncate',
        }), 
        __metadata$31('design:paramtypes', [])
    ], TdTruncatePipe);
    return TdTruncatePipe;
}());

var __decorate$32 = (window && window.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$32 = (window && window.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var TdMediaService = (function () {
    function TdMediaService() {
        var _this = this;
        this._queryMap = new Map();
        this._querySources = {};
        this._queryObservables = {};
        this._queryMap.set('xs', '(max-width: 599px)');
        this._queryMap.set('gt-xs', '(min-width: 600px)');
        this._queryMap.set('sm', '(min-width: 600px) and (max-width: 959px)');
        this._queryMap.set('gt-sm', '(min-width: 960px)');
        this._queryMap.set('md', '(min-width: 960px) and (max-width: 1279px)');
        this._queryMap.set('gt-md', '(min-width: 1280px)');
        this._queryMap.set('lg', '(min-width: 1280px) and (max-width: 1919px)');
        this._queryMap.set('gt-lg', '(min-width: 1920px)');
        this._queryMap.set('xl', '(min-width: 1920px)');
        this._queryMap.set('landscape', 'landscape');
        this._queryMap.set('portrait', 'portrait');
        this._queryMap.set('print', 'print');
        window.onresize = function () {
            _this._onResize();
        };
    }
    /**
     * Used to evaluate whether a given media query is true or false given the current device's screen / window size.
     */
    TdMediaService.prototype.query = function (query) {
        if (this._queryMap.get(query.toLowerCase())) {
            query = this._queryMap.get(query.toLowerCase());
        }
        return window.matchMedia(query).matches;
    };
    /**
     * Registers a media query and returns an [Observable] that will re-evaluate and
     * return if the given media query matches on window resize.
     * Note: don't forget to unsubscribe from [Observable] when finished watching.
     */
    TdMediaService.prototype.registerQuery = function (query) {
        if (this._queryMap.get(query.toLowerCase())) {
            query = this._queryMap.get(query.toLowerCase());
        }
        if (!this._querySources[query]) {
            this._querySources[query] = new rxjs_Subject.Subject();
        }
        this._queryObservables[query] = this._querySources[query].asObservable();
        return this._queryObservables[query];
    };
    TdMediaService.prototype._onResize = function () {
        for (var key in this._querySources) {
            this._querySources[key].next(window.matchMedia(key).matches);
        }
    };
    TdMediaService = __decorate$32([
        _angular_core.Injectable(), 
        __metadata$32('design:paramtypes', [])
    ], TdMediaService);
    return TdMediaService;
}());

var __decorate$33 = (window && window.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$33 = (window && window.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var TdMediaToggleDirective = (function () {
    function TdMediaToggleDirective(_renderer, _elementRef, _mediaService) {
        this._renderer = _renderer;
        this._elementRef = _elementRef;
        this._mediaService = _mediaService;
        this._matches = false;
        this._attributes = {};
        this._styles = {};
        this._classes = [];
    }
    Object.defineProperty(TdMediaToggleDirective.prototype, "query", {
        /**
         * tdMediaToggle: string
         * Media query used to evaluate screen/window size.
         * Toggles attributes, classes and styles if media query is matched.
         */
        set: function (query) {
            if (!query) {
                throw 'Query needed for [tdMediaToggle] directive.';
            }
            this._query = query;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TdMediaToggleDirective.prototype, "attributes", {
        /**
         * mediaAttributes: {[key: string]: string}
         * Attributes to be toggled when media query matches.
         */
        set: function (attributes) {
            this._attributes = attributes;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TdMediaToggleDirective.prototype, "classes", {
        /**
         * mediaClasses: string[]
         * CSS Classes to be toggled when media query matches.
         */
        set: function (classes) {
            this._classes = classes;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TdMediaToggleDirective.prototype, "styles", {
        /**
         * mediaStyles: {[key: string]: string}
         * CSS Styles to be toggled when media query matches.
         */
        set: function (styles) {
            this._styles = styles;
        },
        enumerable: true,
        configurable: true
    });
    TdMediaToggleDirective.prototype.ngOnInit = function () {
        var _this = this;
        this._mediaChange(this._mediaService.query(this._query));
        this._subscription = this._mediaService.registerQuery(this._query).subscribe(function (matches) {
            _this._mediaChange(matches);
        });
    };
    TdMediaToggleDirective.prototype.ngOnDestroy = function () {
        this._subscription.unsubscribe();
    };
    TdMediaToggleDirective.prototype._mediaChange = function (matches) {
        this._matches = matches;
        this._changeAttributes();
        this._changeClasses();
        this._changeStyles();
    };
    TdMediaToggleDirective.prototype._changeAttributes = function () {
        for (var attr in this._attributes) {
            this._renderer.setElementAttribute(this._elementRef.nativeElement, attr, this._matches ? this._attributes[attr] : undefined);
        }
    };
    TdMediaToggleDirective.prototype._changeClasses = function () {
        var _this = this;
        this._classes.forEach(function (className) {
            _this._renderer.setElementClass(_this._elementRef.nativeElement, className, _this._matches);
        });
    };
    TdMediaToggleDirective.prototype._changeStyles = function () {
        for (var style in this._styles) {
            this._renderer.setElementStyle(this._elementRef.nativeElement, style, this._matches ? this._styles[style] : undefined);
        }
    };
    __decorate$33([
        _angular_core.Input('tdMediaToggle'), 
        __metadata$33('design:type', String), 
        __metadata$33('design:paramtypes', [String])
    ], TdMediaToggleDirective.prototype, "query", null);
    __decorate$33([
        _angular_core.Input('mediaAttributes'), 
        __metadata$33('design:type', Object), 
        __metadata$33('design:paramtypes', [Object])
    ], TdMediaToggleDirective.prototype, "attributes", null);
    __decorate$33([
        _angular_core.Input('mediaClasses'), 
        __metadata$33('design:type', Array), 
        __metadata$33('design:paramtypes', [Array])
    ], TdMediaToggleDirective.prototype, "classes", null);
    __decorate$33([
        _angular_core.Input('mediaStyles'), 
        __metadata$33('design:type', Object), 
        __metadata$33('design:paramtypes', [Object])
    ], TdMediaToggleDirective.prototype, "styles", null);
    TdMediaToggleDirective = __decorate$33([
        _angular_core.Directive({
            selector: '[tdMediaToggle]',
        }), 
        __metadata$33('design:paramtypes', [_angular_core.Renderer, _angular_core.ElementRef, TdMediaService])
    ], TdMediaToggleDirective);
    return TdMediaToggleDirective;
}());

var __decorate = (window && window.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (window && window.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var TD_LAYOUT_DIRECTIVES = [
    TdLayoutComponent,
    TdLayoutNavComponent,
    TdLayoutNavListComponent,
    TdLayoutCardOverComponent,
    TdLayoutManageListComponent,
];
var TD_LAYOUT_PROVIDERS = [
    TdLayoutService,
];
var TD_STEP_DIRECTIVES = [
    TdStepsComponent,
    TdStepComponent,
    TdStepHeaderComponent,
    TdStepBodyComponent,
    TdStepActionsDirective,
    TdStepSummaryDirective,
    TdStepContentDirective,
];
var TD_LOADING_ENTRY_COMPONENTS = [
    TdLoadingComponent,
];
var TD_EXPANSION_DIRECTIVES = [
    TdExpansionPanelComponent,
    TdExpansionPanelSummaryComponent,
];
var TD_DIALOG_DIRECTIVES = [
    TdAlertDialogComponent,
    TdConfirmDialogComponent,
    TdPromptDialogComponent,
    TdDialogComponent,
    TdDialogTitleDirective,
    TdDialogActionsDirective,
    TdDialogContentDirective,
];
var TD_DIALOG_ENTRY_COMPONENTS = [
    TdAlertDialogComponent,
    TdConfirmDialogComponent,
    TdPromptDialogComponent,
];
var TD_PLATFORM_DIRECTIVES = [
    TdToggleDirective,
    TdFadeDirective,
    TdAutoTrimDirective,
];
var TD_VALIDATORS = [
    TdMinValidator,
    TdMaxValidator,
    TdNumberRequiredValidator,
];
var TD_PIPES = [
    TdOrderByPipe,
    TdTimeAgoPipe,
    TdTimeDifferencePipe,
    TdBytesPipe,
    TdDigitsPipe,
    TdTruncatePipe,
];
var CovalentCoreModule = (function () {
    function CovalentCoreModule() {
    }
    CovalentCoreModule.forRoot = function () {
        return {
            ngModule: CovalentCoreModule,
            providers: [TdMediaService, TdLayoutService, TdLoadingService, TdDialogService],
        };
    };
    CovalentCoreModule = __decorate([
        _angular_core.NgModule({
            imports: [
                _angular_http.HttpModule,
                _angular_http.JsonpModule,
                _angular_forms.FormsModule,
                _angular_common.CommonModule,
                _angular_material.MaterialModule.forRoot(),
            ],
            declarations: [
                TdMediaToggleDirective,
                TD_PIPES,
                TD_LAYOUT_DIRECTIVES,
                TdLoadingDirective,
                TdLoadingComponent,
                TD_STEP_DIRECTIVES,
                TD_EXPANSION_DIRECTIVES,
                TD_DIALOG_DIRECTIVES,
                TD_PLATFORM_DIRECTIVES,
                TD_VALIDATORS,
            ],
            exports: [
                _angular_http.HttpModule,
                _angular_http.JsonpModule,
                _angular_forms.FormsModule,
                _angular_common.CommonModule,
                _angular_material.MaterialModule,
                TdMediaToggleDirective,
                TD_PIPES,
                TD_LAYOUT_DIRECTIVES,
                TdLoadingDirective,
                TdLoadingComponent,
                TD_STEP_DIRECTIVES,
                TD_EXPANSION_DIRECTIVES,
                TD_DIALOG_DIRECTIVES,
                TD_PLATFORM_DIRECTIVES,
                TD_VALIDATORS,
            ],
            entryComponents: [TD_DIALOG_ENTRY_COMPONENTS],
        }), 
        __metadata('design:paramtypes', [])
    ], CovalentCoreModule);
    return CovalentCoreModule;
}());

exports.TD_LAYOUT_DIRECTIVES = TD_LAYOUT_DIRECTIVES;
exports.TD_LAYOUT_PROVIDERS = TD_LAYOUT_PROVIDERS;
exports.TD_STEP_DIRECTIVES = TD_STEP_DIRECTIVES;
exports.TD_LOADING_ENTRY_COMPONENTS = TD_LOADING_ENTRY_COMPONENTS;
exports.TD_EXPANSION_DIRECTIVES = TD_EXPANSION_DIRECTIVES;
exports.TD_DIALOG_ENTRY_COMPONENTS = TD_DIALOG_ENTRY_COMPONENTS;
exports.TD_PLATFORM_DIRECTIVES = TD_PLATFORM_DIRECTIVES;
exports.TD_VALIDATORS = TD_VALIDATORS;
exports.TD_PIPES = TD_PIPES;
exports.CovalentCoreModule = CovalentCoreModule;
exports.TdLayoutComponent = TdLayoutComponent;
exports.TdLayoutNavComponent = TdLayoutNavComponent;
exports.TdLayoutNavListComponent = TdLayoutNavListComponent;
exports.TdLayoutCardOverComponent = TdLayoutCardOverComponent;
exports.TdLayoutManageListComponent = TdLayoutManageListComponent;
exports.TdStepComponent = TdStepComponent;
exports.TdStepsComponent = TdStepsComponent;
exports.TdLoadingService = TdLoadingService;
exports.TdExpansionPanelComponent = TdExpansionPanelComponent;
exports.TdDialogService = TdDialogService;
exports.TdDialogComponent = TdDialogComponent;
exports.TdDialogTitleDirective = TdDialogTitleDirective;
exports.TdAlertDialogComponent = TdAlertDialogComponent;
exports.TdConfirmDialogComponent = TdConfirmDialogComponent;
exports.TdPromptDialogComponent = TdPromptDialogComponent;
exports.TdToggleDirective = TdToggleDirective;
exports.TdFadeDirective = TdFadeDirective;
exports.TdAutoTrimDirective = TdAutoTrimDirective;
exports.TdMinValidator = TdMinValidator;
exports.TdMaxValidator = TdMaxValidator;
exports.TdNumberRequiredValidator = TdNumberRequiredValidator;
exports.TdOrderByPipe = TdOrderByPipe;
exports.TdTimeAgoPipe = TdTimeAgoPipe;
exports.TdTimeDifferencePipe = TdTimeDifferencePipe;
exports.TdBytesPipe = TdBytesPipe;
exports.TdDigitsPipe = TdDigitsPipe;
exports.TdTruncatePipe = TdTruncatePipe;
exports.TdMediaService = TdMediaService;
exports.TdMediaToggleDirective = TdMediaToggleDirective;

Object.defineProperty(exports, '__esModule', { value: true });

})));
