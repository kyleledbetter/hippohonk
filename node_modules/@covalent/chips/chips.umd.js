(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/forms'), require('@angular/common'), require('@angular/material')) :
    typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/forms', '@angular/common', '@angular/material'], factory) :
    (factory((global.td = global.td || {}, global.td.chips = global.td.chips || {}),global.ng.core,global.ng.forms,global.ng.common,global.ng.material));
}(this, (function (exports,_angular_core,_angular_forms,_angular_common,_angular_material) { 'use strict';

var __decorate = (window && window.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (window && window.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var noop = function () {
    // empty method
};
var TD_CHIPS_CONTROL_VALUE_ACCESSOR = {
    provide: _angular_forms.NG_VALUE_ACCESSOR,
    useExisting: _angular_core.forwardRef(function () { return TdChipsComponent; }),
    multi: true,
};
var TdChipsComponent = (function () {
    function TdChipsComponent() {
        /**
         * Implemented as part of ControlValueAccessor.
         */
        this._value = [];
        this._length = 0;
        this._requireMatch = false;
        /**
         * Boolean value that specifies if the input is valid against the provieded list.
         */
        this.matches = true;
        /**
         * Flag that is true when autocomplete is focused.
         */
        this.focused = false;
        /**
         * items?: string[]
         * Enables Autocompletion with the provided list of strings.
         */
        this.items = [];
        /**
         * readOnly?: boolean
         * Disables the chip input and removal.
         */
        this.readOnly = false;
        /**
         * add?: function
         * Method to be executed when string is added as chip through the autocomplete.
         * Sends chip value as event.
         */
        this.add = new _angular_core.EventEmitter();
        /**
         * remove?: function
         * Method to be executed when string is removed as chip with the "remove" button.
         * Sends chip value as event.
         */
        this.remove = new _angular_core.EventEmitter();
        this.onChange = function (_) { return noop; };
        this.onTouched = function () { return noop; };
    }
    Object.defineProperty(TdChipsComponent.prototype, "requireMatch", {
        get: function () {
            return this._requireMatch;
        },
        /**
         * requireMatch?: boolean
         * Validates input against the provided list before adding it to the model.
         * If it doesnt exist, it cancels the event.
         */
        set: function (requireMatch) {
            this._requireMatch = requireMatch !== '' ? (requireMatch === 'true' || requireMatch === true) : true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TdChipsComponent.prototype, "value", {
        get: function () { return this._value; },
        /**
         * Implemented as part of ControlValueAccessor.
         */
        set: function (v) {
            if (v !== this._value) {
                this._value = v;
                this._length = this._value ? this._value.length : 0;
            }
        },
        enumerable: true,
        configurable: true
    });
    
    TdChipsComponent.prototype.ngDoCheck = function () {
        // Throw onChange event only if array changes size.
        if (this._value && this._value.length !== this._length) {
            this._length = this._value.length;
            this.onChange(this._value);
        }
    };
    Object.defineProperty(TdChipsComponent.prototype, "filteredItems", {
        /**
         * Returns a list of filtered items.
         * Removes the ones that have been added as value.
         */
        get: function () {
            var _this = this;
            if (!this._value) {
                return [];
            }
            return this.items.filter(function (item) {
                return _this._value.indexOf(item) < 0;
            });
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Method that is executed when trying to create a new chip from the autocomplete.
     * returns 'true' if successful, 'false' if it fails.
     */
    TdChipsComponent.prototype.addItem = function (value) {
        if (value.trim() === '' || this._value.indexOf(value) > -1) {
            return false;
        }
        if (this.items && this.requireMatch) {
            if (this.items.indexOf(value) < 0) {
                return false;
            }
        }
        this._value.push(value);
        this.add.emit(value);
        this.onChange(this._value);
        return true;
    };
    /**
     * Method that is executed when trying to remove a chip.
     * returns 'true' if successful, 'false' if it fails.
     */
    TdChipsComponent.prototype.removeItem = function (value) {
        var index = this._value.indexOf(value);
        if (index < 0) {
            return false;
        }
        this._value.splice(index, 1);
        this.remove.emit(value);
        this.onChange(this._value);
        return true;
    };
    TdChipsComponent.prototype.handleFocus = function () {
        this.focused = true;
        return true;
    };
    TdChipsComponent.prototype.handleBlur = function () {
        this.focused = false;
        this.onTouched();
        return true;
    };
    /**
     * Implemented as part of ControlValueAccessor.
     */
    TdChipsComponent.prototype.writeValue = function (value) {
        this.value = value;
    };
    TdChipsComponent.prototype.registerOnChange = function (fn) {
        this.onChange = fn;
    };
    TdChipsComponent.prototype.registerOnTouched = function (fn) {
        this.onTouched = fn;
    };
    __decorate([
        _angular_core.Input('items'), 
        __metadata('design:type', Array)
    ], TdChipsComponent.prototype, "items", void 0);
    __decorate([
        _angular_core.Input('requireMatch'), 
        __metadata('design:type', Object), 
        __metadata('design:paramtypes', [Object])
    ], TdChipsComponent.prototype, "requireMatch", null);
    __decorate([
        _angular_core.Input('readOnly'), 
        __metadata('design:type', Boolean)
    ], TdChipsComponent.prototype, "readOnly", void 0);
    __decorate([
        _angular_core.Input('placeholder'), 
        __metadata('design:type', String)
    ], TdChipsComponent.prototype, "placeholder", void 0);
    __decorate([
        _angular_core.Output('add'), 
        __metadata('design:type', _angular_core.EventEmitter)
    ], TdChipsComponent.prototype, "add", void 0);
    __decorate([
        _angular_core.Output('remove'), 
        __metadata('design:type', _angular_core.EventEmitter)
    ], TdChipsComponent.prototype, "remove", void 0);
    __decorate([
        _angular_core.Input(), 
        __metadata('design:type', Object), 
        __metadata('design:paramtypes', [Object])
    ], TdChipsComponent.prototype, "value", null);
    TdChipsComponent = __decorate([
        _angular_core.Component({
            providers: [TD_CHIPS_CONTROL_VALUE_ACCESSOR],
            selector: 'td-chips',
            styles: [":host { display: block; padding: 0px 5px 0px 5px; } :host /deep/ .td-chip { display: inline-block; background: #e0e0e0; color: rgba(0, 0, 0, 0.87); cursor: default; border-radius: 16px; line-height: 32px; margin: 8px 8px 0 0; padding: 0 12px; box-sizing: border-box; max-width: 100%; position: relative; } :host /deep/ .td-chip md-icon { position: relative; top: 5px; left: 5px; height: 18px; width: 18px; font-size: 19px; color: rgba(0, 0, 0, 0.23); } :host /deep/ .td-chip md-icon:hover { cursor: pointer; color: rgba(0, 0, 0, 0.54); } .md-input-underline { position: relative; height: 1px; width: 100%; margin-top: 4px; border-top: 1px solid rgba(0, 0, 0, 0.26); } .md-input-underline.md-disabled { border-top: 0; background-image: linear-gradient(to right, rgba(0, 0, 0, 0.26) 0%, rgba(0, 0, 0, 0.26) 33%, transparent 0%); background-position: 0; background-size: 4px 1px; background-repeat: repeat-x; } .md-input-underline .md-input-ripple { position: absolute; height: 2px; z-index: 1; background-color: #f57c00; top: -1px; width: 100%; transform-origin: top; opacity: 0; transform: scaleY(0); transition: transform 0.4s cubic-bezier(0.25, 0.8, 0.25, 1), opacity 0.4s cubic-bezier(0.25, 0.8, 0.25, 1); } .md-input-underline .md-input-ripple.md-accent { background-color: #03a9f4; } .md-input-underline .md-input-ripple.md-warn { background-color: #f44336; opacity: 1; transform: scaleY(1); } .md-input-underline .md-input-ripple.md-focused { opacity: 1; transform: scaleY(1); } :host /deep/ md-input input::-webkit-calendar-picker-indicator { display: none; } :host /deep/ md-input .md-input-underline { display: none; } "],
            template: "<div flex> <template let-chip ngFor [ngForOf]=\"value\"> <td-chip> <span>{{chip}}</span> <md-icon *ngIf=\"!readOnly\" [tabIndex]=\"0\"  (keydown.enter)=\"removeItem(chip)\"  (click)=\"removeItem(chip)\" title=\"Delete\">cancel</md-icon> </td-chip> </template> <td-autocomplete #autocomplete  [disabled]=\"readOnly\"  [searchItems]=\"filteredItems\" [placeholder]=\"readOnly? '' : placeholder\" (focus)=\"handleFocus()\" (blur)=\"handleBlur() && (matches = autocomplete.clear())\" (itemSelect)=\"(matches = addItem($event)) && autocomplete.clear()\"></td-autocomplete> <div class=\"md-input-underline\" [class.md-disabled]=\"disabled\"> <span class=\"md-input-ripple\" [class.md-focused]=\"focused\" [class.md-warn]=\"!matches\"></span> </div> </div> ",
        }), 
        __metadata('design:paramtypes', [])
    ], TdChipsComponent);
    return TdChipsComponent;
}());

var __decorate$2 = (window && window.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$2 = (window && window.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var TdChipComponent = (function () {
    function TdChipComponent() {
    }
    TdChipComponent = __decorate$2([
        _angular_core.Component({
            selector: 'td-chip',
            styles: [":host { display: block; float: left; } "],
            template: "<span class=\"td-chip\"> <ng-content></ng-content> </span>",
        }), 
        __metadata$2('design:paramtypes', [])
    ], TdChipComponent);
    return TdChipComponent;
}());

var __decorate$3 = (window && window.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$3 = (window && window.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var noop$1 = function () {
    // empty method
};
var TD_AUTOCOMPLETE_CONTROL_VALUE_ACCESSOR = {
    provide: _angular_forms.NG_VALUE_ACCESSOR,
    useExisting: _angular_core.forwardRef(function () { return TdAutoCompleteComponent; }),
    multi: true,
};
var TdAutoCompleteComponent = (function () {
    function TdAutoCompleteComponent() {
        this._value = '';
        /** Callback registered via registerOnTouched (ControlValueAccessor) */
        this._onTouchedCallback = noop$1;
        /** Callback registered via registerOnChange (ControlValueAccessor) */
        this._onChangeCallback = noop$1;
        this.listName = this.randomName();
        this.dividerColor = 'primary';
        this.searchItems = [];
        this.readOnly = false;
        this.required = false;
        this.disabled = false;
        this.autoFocus = false;
        this.itemSelect = new _angular_core.EventEmitter();
        this.focus = new _angular_core.EventEmitter();
        this.blur = new _angular_core.EventEmitter();
    }
    Object.defineProperty(TdAutoCompleteComponent.prototype, "value", {
        get: function () { return this._value; },
        set: function (v) {
            if (v !== this._value) {
                this._value = v;
                this._onChangeCallback(v);
            }
        },
        enumerable: true,
        configurable: true
    });
    
    TdAutoCompleteComponent.prototype.clear = function () {
        this.writeValue('');
        return true;
    };
    TdAutoCompleteComponent.prototype.randomName = function () {
        var text = '';
        var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
        for (var i = 0; i < 7; i++) {
            text += possible.charAt(Math.floor(Math.random() * possible.length));
        }
        return text;
    };
    TdAutoCompleteComponent.prototype.handleItemSelect = function () {
        this.itemSelect.emit(this._value);
    };
    TdAutoCompleteComponent.prototype.handleFocus = function () {
        this.focus.emit(true);
    };
    TdAutoCompleteComponent.prototype.handleBlur = function () {
        this.blur.emit(false);
    };
    /**
     * Implemented as part of ControlValueAccessor.
     * TODO: internal
     */
    TdAutoCompleteComponent.prototype.writeValue = function (value) {
        this._value = value;
    };
    /**
     * Implemented as part of ControlValueAccessor.
     * TODO: internal
     */
    TdAutoCompleteComponent.prototype.registerOnChange = function (fn) {
        this._onChangeCallback = fn;
    };
    /**
     * Implemented as part of ControlValueAccessor.
     * TODO: internal
     */
    TdAutoCompleteComponent.prototype.registerOnTouched = function (fn) {
        this._onTouchedCallback = fn;
    };
    __decorate$3([
        _angular_core.Input('name'), 
        __metadata$3('design:type', String)
    ], TdAutoCompleteComponent.prototype, "name", void 0);
    __decorate$3([
        _angular_core.Input('dividerColor'), 
        __metadata$3('design:type', Object)
    ], TdAutoCompleteComponent.prototype, "dividerColor", void 0);
    __decorate$3([
        _angular_core.Input('placeholder'), 
        __metadata$3('design:type', String)
    ], TdAutoCompleteComponent.prototype, "placeholder", void 0);
    __decorate$3([
        _angular_core.Input('searchItems'), 
        __metadata$3('design:type', Array)
    ], TdAutoCompleteComponent.prototype, "searchItems", void 0);
    __decorate$3([
        _angular_core.Input('readOnly'), 
        __metadata$3('design:type', Boolean)
    ], TdAutoCompleteComponent.prototype, "readOnly", void 0);
    __decorate$3([
        _angular_core.Input('required'), 
        __metadata$3('design:type', Boolean)
    ], TdAutoCompleteComponent.prototype, "required", void 0);
    __decorate$3([
        _angular_core.Input('disabled'), 
        __metadata$3('design:type', Boolean)
    ], TdAutoCompleteComponent.prototype, "disabled", void 0);
    __decorate$3([
        _angular_core.Input('autoFocus'), 
        __metadata$3('design:type', Boolean)
    ], TdAutoCompleteComponent.prototype, "autoFocus", void 0);
    __decorate$3([
        _angular_core.Input('max'), 
        __metadata$3('design:type', Object)
    ], TdAutoCompleteComponent.prototype, "max", void 0);
    __decorate$3([
        _angular_core.Input('maxLength'), 
        __metadata$3('design:type', Number)
    ], TdAutoCompleteComponent.prototype, "maxLength", void 0);
    __decorate$3([
        _angular_core.Input('min'), 
        __metadata$3('design:type', Object)
    ], TdAutoCompleteComponent.prototype, "min", void 0);
    __decorate$3([
        _angular_core.Input('minLength'), 
        __metadata$3('design:type', Number)
    ], TdAutoCompleteComponent.prototype, "minLength", void 0);
    __decorate$3([
        _angular_core.Input(), 
        __metadata$3('design:type', Object)
    ], TdAutoCompleteComponent.prototype, "value", null);
    __decorate$3([
        _angular_core.Output('itemSelect'), 
        __metadata$3('design:type', _angular_core.EventEmitter)
    ], TdAutoCompleteComponent.prototype, "itemSelect", void 0);
    __decorate$3([
        _angular_core.Output('focus'), 
        __metadata$3('design:type', _angular_core.EventEmitter)
    ], TdAutoCompleteComponent.prototype, "focus", void 0);
    __decorate$3([
        _angular_core.Output('blur'), 
        __metadata$3('design:type', _angular_core.EventEmitter)
    ], TdAutoCompleteComponent.prototype, "blur", void 0);
    TdAutoCompleteComponent = __decorate$3([
        _angular_core.Component({
            providers: [TD_AUTOCOMPLETE_CONTROL_VALUE_ACCESSOR],
            selector: 'td-autocomplete',
            styles: [":host { display: block; } "],
            template: "<div flex> <md-input flex=\"100\"  [(ngModel)]=\"value\" [placeholder]=\"placeholder\" [autofocus]=\"autoFocus\" [list]=\"listName\" [max]=\"max\" [maxlength]=\"maxLength\" [min]=\"min\" [minlength]=\"minLength\" [readonly]=\"readOnly\" [disabled]=\"disabled\" [required]=\"required\" [name]=\"name\" (keyup.enter)=\"handleItemSelect()\" (focus)=\"handleFocus()\" (blur)=\"handleBlur()\"> </md-input> <datalist [id]=\"listName\"> <template let-item ngFor [ngForOf]=\"searchItems\"> <option [value]=\"item\"></option> </template> </datalist> </div> ",
        }), 
        __metadata$3('design:paramtypes', [])
    ], TdAutoCompleteComponent);
    return TdAutoCompleteComponent;
}());

var __decorate$1 = (window && window.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$1 = (window && window.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var CovalentChipsModule = (function () {
    function CovalentChipsModule() {
    }
    CovalentChipsModule.forRoot = function () {
        return {
            ngModule: CovalentChipsModule,
            providers: [],
        };
    };
    CovalentChipsModule = __decorate$1([
        _angular_core.NgModule({
            imports: [
                _angular_forms.FormsModule,
                _angular_common.CommonModule,
                _angular_material.MdInputModule.forRoot(),
                _angular_material.MdIconModule.forRoot(),
            ],
            declarations: [
                TdChipsComponent,
                TdChipComponent,
                TdAutoCompleteComponent,
            ],
            exports: [
                TdChipsComponent,
                TdChipComponent,
                TdAutoCompleteComponent,
            ],
        }), 
        __metadata$1('design:paramtypes', [])
    ], CovalentChipsModule);
    return CovalentChipsModule;
}());

exports.TdChipsComponent = TdChipsComponent;
exports.CovalentChipsModule = CovalentChipsModule;

Object.defineProperty(exports, '__esModule', { value: true });

})));
