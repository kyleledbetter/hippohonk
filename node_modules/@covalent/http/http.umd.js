(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/http'), require('rxjs/Observable'), require('@angular/core')) :
    typeof define === 'function' && define.amd ? define(['exports', '@angular/http', 'rxjs/Observable', '@angular/core'], factory) :
    (factory((global.td = global.td || {}, global.td.http = global.td.http || {}),global.ng.http,global.Rx,global.ng.core));
}(this, (function (exports,_angular_http,rxjs_Observable,_angular_core) { 'use strict';

var RESTService = (function () {
    function RESTService(http, config) {
        this.http = http;
        this._base = config.baseUrl.replace(/\/$/, '');
        this._path = config.path.replace(/^\//, '');
        this._baseHeaders = config.baseHeaders ? config.baseHeaders : new _angular_http.Headers();
        this.transform = config.transform ? config.transform : function (response) { return response.json(); };
    }
    RESTService.prototype.query = function (query) {
        var _this = this;
        var request = this.http.get(this.buildUrl(undefined, query), this.buildRequestOptions());
        return request.map(function (res) {
            return _this.transform(res);
        }).catch(function (error) {
            return new rxjs_Observable.Observable(function (subscriber) {
                try {
                    subscriber.error(_this.transform(error));
                }
                catch (err) {
                    subscriber.error(error);
                }
            });
        });
    };
    RESTService.prototype.get = function (id) {
        var _this = this;
        var request = this.http.get(this.buildUrl(id), this.buildRequestOptions());
        return request.map(function (res) {
            return _this.transform(res);
        }).catch(function (error) {
            return new rxjs_Observable.Observable(function (subscriber) {
                try {
                    subscriber.error(_this.transform(error));
                }
                catch (err) {
                    subscriber.error(error);
                }
            });
        });
    };
    RESTService.prototype.create = function (obj) {
        var _this = this;
        var requestOptions = this.buildRequestOptions();
        var request = this.http.post(this.buildUrl(), obj, requestOptions);
        return request.map(function (res) {
            if (res.status === 201) {
                return _this.transform(res);
            }
            else {
                return res;
            }
        }).catch(function (error) {
            return new rxjs_Observable.Observable(function (subscriber) {
                try {
                    subscriber.error(_this.transform(error));
                }
                catch (err) {
                    subscriber.error(error);
                }
            });
        });
    };
    RESTService.prototype.update = function (id, obj) {
        var _this = this;
        var requestOptions = this.buildRequestOptions();
        var request = this.http.patch(this.buildUrl(id), obj, requestOptions);
        return request.map(function (res) {
            if (res.status === 200) {
                return _this.transform(res);
            }
            else {
                return res;
            }
        }).catch(function (error) {
            return new rxjs_Observable.Observable(function (subscriber) {
                try {
                    subscriber.error(_this.transform(error));
                }
                catch (err) {
                    subscriber.error(error);
                }
            });
        });
    };
    RESTService.prototype.delete = function (id) {
        var _this = this;
        var request = this.http.delete(this.buildUrl(id), this.buildRequestOptions());
        return request.map(function (res) {
            if (res.status === 200) {
                return _this.transform(res);
            }
            else {
                return res;
            }
        }).catch(function (error) {
            return new rxjs_Observable.Observable(function (subscriber) {
                try {
                    subscriber.error(_this.transform(error));
                }
                catch (err) {
                    subscriber.error(error);
                }
            });
        });
    };
    RESTService.prototype.buildRequestOptions = function () {
        var requestHeaders = new _angular_http.Headers();
        this._baseHeaders.forEach(function (value, key) {
            requestHeaders.set(key, value);
        });
        var requestOptions = {
            headers: requestHeaders,
        };
        return requestOptions;
    };
    RESTService.prototype.buildUrl = function (id, query) {
        var url = this._path ? this._path : '';
        if (id) {
            url += "/" + id;
        }
        if (query) {
            url += this.buildQuery(query);
        }
        url = this._base + "/" + url;
        return url;
    };
    RESTService.prototype.buildQuery = function (query) {
        var url = '';
        if (query) {
            url += '?';
            var params = [];
            for (var key in query) {
                var value = query[key];
                if (value !== undefined) {
                    params.push(key + "=" + value);
                }
            }
            url += params.join('&');
        }
        return url;
    };
    return RESTService;
}());

var __decorate = (window && window.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (window && window.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var HttpInterceptorService = (function () {
    function HttpInterceptorService(_http, _injector, requestInterceptors) {
        var _this = this;
        this._http = _http;
        this._injector = _injector;
        this._requestInterceptors = [];
        requestInterceptors.forEach(function (interceptor) {
            _this._requestInterceptors.push(_injector.get(interceptor));
        });
    }
    HttpInterceptorService.prototype.request = function (url, options) {
        if (options === void 0) { options = {}; }
        return this._setupRequest(this._http.request(url, this._requestResolve(options)));
    };
    HttpInterceptorService.prototype.delete = function (url, options) {
        if (options === void 0) { options = {}; }
        return this._setupRequest(this._http.delete(url, this._requestResolve(options)));
    };
    HttpInterceptorService.prototype.get = function (url, options) {
        if (options === void 0) { options = {}; }
        return this._setupRequest(this._http.get(url, this._requestResolve(options)));
    };
    HttpInterceptorService.prototype.head = function (url, options) {
        if (options === void 0) { options = {}; }
        return this._setupRequest(this._http.head(url, this._requestResolve(options)));
    };
    HttpInterceptorService.prototype.patch = function (url, data, options) {
        if (options === void 0) { options = {}; }
        return this._setupRequest(this._http.patch(url, data, this._requestResolve(options)));
    };
    HttpInterceptorService.prototype.post = function (url, data, options) {
        if (options === void 0) { options = {}; }
        return this._setupRequest(this._http.post(url, data, this._requestResolve(options)));
    };
    HttpInterceptorService.prototype.put = function (url, data, options) {
        if (options === void 0) { options = {}; }
        return this._setupRequest(this._http.put(url, data, this._requestResolve(options)));
    };
    HttpInterceptorService.prototype._setupRequest = function (responseObservable) {
        var _this = this;
        return new rxjs_Observable.Observable(function (subscriber) {
            responseObservable.do(function (response) {
                subscriber.next(_this._responseResolve(response));
                subscriber.complete();
            }).catch(function (error) {
                return new rxjs_Observable.Observable(function () {
                    subscriber.error(_this._responseErrorResolve(error));
                });
            }).subscribe();
        });
    };
    HttpInterceptorService.prototype._requestResolve = function (requestOptions) {
        this._requestInterceptors.forEach(function (interceptor) {
            if (interceptor.onRequest) {
                requestOptions = interceptor.onRequest(requestOptions);
            }
        });
        return requestOptions;
    };
    HttpInterceptorService.prototype._responseResolve = function (response) {
        this._requestInterceptors.forEach(function (interceptor) {
            if (interceptor.onResponse) {
                response = interceptor.onResponse(response);
            }
        });
        return response;
    };
    HttpInterceptorService.prototype._responseErrorResolve = function (error) {
        this._requestInterceptors.forEach(function (interceptor) {
            if (interceptor.onResponseError) {
                error = interceptor.onResponseError(error);
            }
        });
        return error;
    };
    HttpInterceptorService = __decorate([
        _angular_core.Injectable(), 
        __metadata('design:paramtypes', [_angular_http.Http, _angular_core.Injector, Array])
    ], HttpInterceptorService);
    return HttpInterceptorService;
}());

var __decorate$1 = (window && window.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$1 = (window && window.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var CovalentHttpModule = (function () {
    function CovalentHttpModule() {
    }
    CovalentHttpModule.forRoot = function (requestInterceptors) {
        if (requestInterceptors === void 0) { requestInterceptors = []; }
        var providers = [];
        requestInterceptors.forEach(function (interceptor) {
            providers.push(interceptor);
        });
        providers.push({
            provide: HttpInterceptorService,
            useFactory: function (http, injector) {
                return new HttpInterceptorService(http, injector, requestInterceptors);
            },
            deps: [_angular_http.Http, _angular_core.Injector],
        });
        return {
            ngModule: CovalentHttpModule,
            providers: providers,
        };
    };
    CovalentHttpModule = __decorate$1([
        _angular_core.NgModule({
            imports: [
                _angular_http.HttpModule,
            ],
            providers: [
                HttpInterceptorService,
            ],
        }), 
        __metadata$1('design:paramtypes', [])
    ], CovalentHttpModule);
    return CovalentHttpModule;
}());

exports.RESTService = RESTService;
exports.HttpInterceptorService = HttpInterceptorService;
exports.CovalentHttpModule = CovalentHttpModule;

Object.defineProperty(exports, '__esModule', { value: true });

})));
