var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { NgModule, Injector } from '@angular/core';
import { HttpModule, Http } from '@angular/http';
import { HttpInterceptorService } from './http-interceptor.service';
export var CovalentHttpModule = (function () {
    function CovalentHttpModule() {
    }
    CovalentHttpModule.forRoot = function (requestInterceptors) {
        if (requestInterceptors === void 0) { requestInterceptors = []; }
        var providers = [];
        requestInterceptors.forEach(function (interceptor) {
            providers.push(interceptor);
        });
        providers.push({
            provide: HttpInterceptorService,
            useFactory: function (http, injector) {
                return new HttpInterceptorService(http, injector, requestInterceptors);
            },
            deps: [Http, Injector],
        });
        return {
            ngModule: CovalentHttpModule,
            providers: providers,
        };
    };
    CovalentHttpModule = __decorate([
        NgModule({
            imports: [
                HttpModule,
            ],
            providers: [
                HttpInterceptorService,
            ],
        }), 
        __metadata('design:paramtypes', [])
    ], CovalentHttpModule);
    return CovalentHttpModule;
}());

//# sourceMappingURL=http.module.js.map
