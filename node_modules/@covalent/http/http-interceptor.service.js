var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Injectable, Injector } from '@angular/core';
import { Http } from '@angular/http';
import { Observable } from 'rxjs/Observable';
export var HttpInterceptorService = (function () {
    function HttpInterceptorService(_http, _injector, requestInterceptors) {
        var _this = this;
        this._http = _http;
        this._injector = _injector;
        this._requestInterceptors = [];
        requestInterceptors.forEach(function (interceptor) {
            _this._requestInterceptors.push(_injector.get(interceptor));
        });
    }
    HttpInterceptorService.prototype.request = function (url, options) {
        if (options === void 0) { options = {}; }
        return this._setupRequest(this._http.request(url, this._requestResolve(options)));
    };
    HttpInterceptorService.prototype.delete = function (url, options) {
        if (options === void 0) { options = {}; }
        return this._setupRequest(this._http.delete(url, this._requestResolve(options)));
    };
    HttpInterceptorService.prototype.get = function (url, options) {
        if (options === void 0) { options = {}; }
        return this._setupRequest(this._http.get(url, this._requestResolve(options)));
    };
    HttpInterceptorService.prototype.head = function (url, options) {
        if (options === void 0) { options = {}; }
        return this._setupRequest(this._http.head(url, this._requestResolve(options)));
    };
    HttpInterceptorService.prototype.patch = function (url, data, options) {
        if (options === void 0) { options = {}; }
        return this._setupRequest(this._http.patch(url, data, this._requestResolve(options)));
    };
    HttpInterceptorService.prototype.post = function (url, data, options) {
        if (options === void 0) { options = {}; }
        return this._setupRequest(this._http.post(url, data, this._requestResolve(options)));
    };
    HttpInterceptorService.prototype.put = function (url, data, options) {
        if (options === void 0) { options = {}; }
        return this._setupRequest(this._http.put(url, data, this._requestResolve(options)));
    };
    HttpInterceptorService.prototype._setupRequest = function (responseObservable) {
        var _this = this;
        return new Observable(function (subscriber) {
            responseObservable.do(function (response) {
                subscriber.next(_this._responseResolve(response));
                subscriber.complete();
            }).catch(function (error) {
                return new Observable(function () {
                    subscriber.error(_this._responseErrorResolve(error));
                });
            }).subscribe();
        });
    };
    HttpInterceptorService.prototype._requestResolve = function (requestOptions) {
        this._requestInterceptors.forEach(function (interceptor) {
            if (interceptor.onRequest) {
                requestOptions = interceptor.onRequest(requestOptions);
            }
        });
        return requestOptions;
    };
    HttpInterceptorService.prototype._responseResolve = function (response) {
        this._requestInterceptors.forEach(function (interceptor) {
            if (interceptor.onResponse) {
                response = interceptor.onResponse(response);
            }
        });
        return response;
    };
    HttpInterceptorService.prototype._responseErrorResolve = function (error) {
        this._requestInterceptors.forEach(function (interceptor) {
            if (interceptor.onResponseError) {
                error = interceptor.onResponseError(error);
            }
        });
        return error;
    };
    HttpInterceptorService = __decorate([
        Injectable(), 
        __metadata('design:paramtypes', [Http, Injector, Array])
    ], HttpInterceptorService);
    return HttpInterceptorService;
}());

//# sourceMappingURL=http-interceptor.service.js.map
