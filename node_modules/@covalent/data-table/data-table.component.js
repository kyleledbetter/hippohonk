var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Component, Input, Output, EventEmitter, ViewChildren, QueryList, Renderer } from '@angular/core';
import { FormControl } from '@angular/forms';
import { MdInput } from '@angular/material';
import 'rxjs/add/operator/debounceTime';
import * as _ from 'lodash';
export var TdDataTableSortingOrder;
(function (TdDataTableSortingOrder) {
    TdDataTableSortingOrder[TdDataTableSortingOrder["Ascending"] = 0] = "Ascending";
    TdDataTableSortingOrder[TdDataTableSortingOrder["Descending"] = 1] = "Descending";
})(TdDataTableSortingOrder || (TdDataTableSortingOrder = {}));
;
;
;
export var TdDataTableComponent = (function () {
    function TdDataTableComponent(renderer) {
        this.renderer = renderer;
        this._rowSelectionField = 'selected';
        this._multiple = true;
        this._search = false;
        this._hasData = false;
        this._initialized = false;
        /** pagination */
        this._pageSize = 10;
        this._currentPage = 0;
        this._totalPages = 0;
        this._pagination = false;
        /** sorting */
        this._sorting = false;
        this._sortOrder = TdDataTableSortingOrder.Ascending;
        /** search by term */
        this._searchVisible = false;
        this._searchTerm = '';
        this._searchTermControl = new FormControl();
        /** events */
        this.sortChanged = new EventEmitter();
    }
    Object.defineProperty(TdDataTableComponent.prototype, "data", {
        set: function (data) {
            this._data = data;
            this.resetPagination();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TdDataTableComponent.prototype, "pageSize", {
        set: function (size) {
            if (typeof size === 'string') {
                this._pageSize = parseInt(size, 10);
            }
            else {
                this._pageSize = size;
            }
            this._pagination = true;
            this.resetPagination();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TdDataTableComponent.prototype, "rowSelectionField", {
        set: function (field) {
            this._rowSelectionField = field;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TdDataTableComponent.prototype, "rowSelection", {
        set: function (selection) {
            var settingAsString = typeof selection === 'string'
                && selection !== 'true' && selection !== 'false';
            if (settingAsString) {
                this._rowSelection = true;
                this._rowSelectionField = '' + selection;
            }
            else {
                this._rowSelection = selection !== '' ? (selection === 'true' || selection === true) : true;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TdDataTableComponent.prototype, "multiple", {
        set: function (multiple) {
            this._multiple = multiple !== '' ? (multiple === 'true' || multiple === true) : true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TdDataTableComponent.prototype, "search", {
        set: function (search) {
            this._search = search !== '' ? (search === 'true' || search === true) : true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TdDataTableComponent.prototype, "columns", {
        get: function () {
            var _this = this;
            if (this._columns) {
                return this._columns;
            }
            if (!this._data) {
                return [];
            }
            this._columns = [];
            this._data.forEach(function (row) {
                Object.keys(row).forEach(function (k) {
                    if (!_this._columns.find(function (c) { return c.name === k; })) {
                        _this._columns.push({ name: k, label: k });
                    }
                });
            });
            return this._columns;
        },
        set: function (cols) {
            this._columns = cols;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TdDataTableComponent.prototype, "sorting", {
        set: function (sorting) {
            this._sorting = sorting !== '' ? (sorting === 'true' || sorting === true) : true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TdDataTableComponent.prototype, "sortBy", {
        set: function (columnName) {
            if (!columnName) {
                return;
            }
            var column = this.columns.find(function (c) { return c.name === columnName; });
            if (!column) {
                throw '[sortBy] must be a valid column name';
            }
            this._sortBy = column;
            this._sorting = true;
            this.filterData();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TdDataTableComponent.prototype, "sortOrder", {
        set: function (order) {
            var sortOrder = order ? order.toUpperCase() : 'ASC';
            if (sortOrder !== 'DESC' && sortOrder !== 'ASC') {
                throw '[sortOrder] must be empty, ASC or DESC';
            }
            this._sortOrder = sortOrder === 'ASC' ?
                TdDataTableSortingOrder.Ascending : TdDataTableSortingOrder.Descending;
            this.filterData();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TdDataTableComponent.prototype, "pagination", {
        set: function (pagination) {
            this._pagination = pagination !== '' ? (pagination === 'true' || pagination === true) : true;
            this.resetPagination();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TdDataTableComponent.prototype, "hasData", {
        get: function () {
            return this._hasData;
        },
        enumerable: true,
        configurable: true
    });
    TdDataTableComponent.prototype.ngOnInit = function () {
        this._searchTermControl.valueChanges
            .debounceTime(250)
            .subscribe(this.searchTermChanged.bind(this));
    };
    TdDataTableComponent.prototype.ngAfterViewInit = function () {
        this.preprocessData();
        this._initialized = true;
        this.filterData();
    };
    TdDataTableComponent.prototype.areAllSelected = function () {
        var _this = this;
        var match = this._data.find(function (d) { return !d[_this._rowSelectionField]; });
        return typeof match === 'undefined';
    };
    TdDataTableComponent.prototype.selectAll = function (checked) {
        var _this = this;
        this._data.forEach(function (d) { return d[_this._rowSelectionField] = checked; });
    };
    TdDataTableComponent.prototype.select = function (row, checked, event) {
        event.preventDefault();
        // clears all the fields for the dataset
        if (!this._multiple) {
            this.selectAll(false);
        }
        // toggles the selection field
        row[this._rowSelectionField] = checked;
    };
    TdDataTableComponent.prototype.toggleSearch = function () {
        this._searchVisible = !this._searchVisible;
        if (this._searchVisible) {
            setTimeout(this.focusOnSearch.bind(this));
        }
        else {
            setTimeout(this.clearSearch.bind(this));
        }
    };
    TdDataTableComponent.prototype.focusOnSearch = function () {
        this._searchTermInput.first.focus();
    };
    TdDataTableComponent.prototype.clearSearch = function () {
        this._searchTermControl.setValue('');
    };
    TdDataTableComponent.prototype.setSorting = function (column) {
        if (this._sortBy === column) {
            this._sortOrder = this._sortOrder === TdDataTableSortingOrder.Ascending ?
                TdDataTableSortingOrder.Descending : TdDataTableSortingOrder.Ascending;
        }
        else {
            this._sortBy = column;
            this._sortOrder = TdDataTableSortingOrder.Ascending;
        }
        this.notifySortChanged();
        this.filterData();
    };
    TdDataTableComponent.prototype.notifySortChanged = function () {
        if (!this._initialized) {
            return;
        }
        this.sortChanged.next({ column: this._sortBy, order: this._sortOrder });
    };
    TdDataTableComponent.prototype.nextPage = function () {
        if (this._currentPage < this._totalPages) {
            this._currentPage = this._currentPage + 1;
            this.filterData();
        }
    };
    TdDataTableComponent.prototype.prevPage = function () {
        this._currentPage = Math.max(this._currentPage - 1, 1);
        this.filterData();
    };
    TdDataTableComponent.prototype.isAscending = function () {
        return this._sortOrder === TdDataTableSortingOrder.Ascending;
    };
    TdDataTableComponent.prototype.isDescending = function () {
        return this._sortOrder === TdDataTableSortingOrder.Descending;
    };
    TdDataTableComponent.prototype.preprocessData = function () {
        var _this = this;
        this._data = _.cloneDeep(this._data);
        this._data = this._data.map(function (row) {
            _this.columns.filter(function (c) { return c.format; }).forEach(function (c) {
                row[c.name] = c.format(row[c.name]);
            });
            return row;
        });
    };
    TdDataTableComponent.prototype.searchTermChanged = function (value) {
        this._searchTerm = value;
        this.resetPagination();
    };
    TdDataTableComponent.prototype.resetPagination = function () {
        this._currentPage = 1;
        this._totalPages = 0;
        this.filterData();
    };
    TdDataTableComponent.prototype.filterData = function () {
        this._visibleData = this._data;
        if (!this._initialized) {
            return;
        }
        var filter = this._searchTerm.toLowerCase();
        if (filter) {
            this._visibleData = this._visibleData.filter(function (item) {
                var res = Object.keys(item).find(function (key) {
                    var itemValue = ('' + item[key]).toLowerCase();
                    return itemValue.indexOf(filter) > -1;
                });
                return !(typeof res === 'undefined');
            });
        }
        if (this._sorting && this._sortBy) {
            this._visibleData = _.sortBy(this._visibleData, this._sortBy.name);
            if (this._sortOrder === TdDataTableSortingOrder.Descending) {
                this._visibleData = _.reverse(this._visibleData);
            }
        }
        if (this._pagination) {
            var pageStart = (this._currentPage - 1) * this._pageSize;
            var pageEnd = Math.min(pageStart + this._pageSize, this._visibleData.length);
            this._totalPages = Math.ceil(this._visibleData.length / this._pageSize);
            this._visibleData = this._visibleData.slice(pageStart, pageEnd);
        }
        this._hasData = this._visibleData.length > 0;
    };
    __decorate([
        ViewChildren(MdInput), 
        __metadata('design:type', QueryList)
    ], TdDataTableComponent.prototype, "_searchTermInput", void 0);
    __decorate([
        Output(), 
        __metadata('design:type', EventEmitter)
    ], TdDataTableComponent.prototype, "sortChanged", void 0);
    __decorate([
        Input('title'), 
        __metadata('design:type', String)
    ], TdDataTableComponent.prototype, "_title", void 0);
    __decorate([
        Input('data'), 
        __metadata('design:type', Array), 
        __metadata('design:paramtypes', [Array])
    ], TdDataTableComponent.prototype, "data", null);
    __decorate([
        Input('pageSize'), 
        __metadata('design:type', Object), 
        __metadata('design:paramtypes', [Object])
    ], TdDataTableComponent.prototype, "pageSize", null);
    __decorate([
        Input('rowSelectionField'), 
        __metadata('design:type', String), 
        __metadata('design:paramtypes', [String])
    ], TdDataTableComponent.prototype, "rowSelectionField", null);
    __decorate([
        Input('rowSelection'), 
        __metadata('design:type', Object), 
        __metadata('design:paramtypes', [Object])
    ], TdDataTableComponent.prototype, "rowSelection", null);
    __decorate([
        Input('multiple'), 
        __metadata('design:type', Object), 
        __metadata('design:paramtypes', [Object])
    ], TdDataTableComponent.prototype, "multiple", null);
    __decorate([
        Input('search'), 
        __metadata('design:type', Object), 
        __metadata('design:paramtypes', [Object])
    ], TdDataTableComponent.prototype, "search", null);
    __decorate([
        Input('columns'), 
        __metadata('design:type', Array), 
        __metadata('design:paramtypes', [Array])
    ], TdDataTableComponent.prototype, "columns", null);
    __decorate([
        Input('sorting'), 
        __metadata('design:type', Object), 
        __metadata('design:paramtypes', [Object])
    ], TdDataTableComponent.prototype, "sorting", null);
    __decorate([
        Input('sortBy'), 
        __metadata('design:type', String), 
        __metadata('design:paramtypes', [String])
    ], TdDataTableComponent.prototype, "sortBy", null);
    __decorate([
        Input('sortOrder'), 
        __metadata('design:type', Object), 
        __metadata('design:paramtypes', [Object])
    ], TdDataTableComponent.prototype, "sortOrder", null);
    __decorate([
        Input('pagination'), 
        __metadata('design:type', Object), 
        __metadata('design:paramtypes', [Object])
    ], TdDataTableComponent.prototype, "pagination", null);
    TdDataTableComponent = __decorate([
        Component({
            selector: 'td-data-table',
            styles: [".md-row { border-bottom-color: rgba(0, 0, 0, 0.12); } .md-checkbox-cell, .md-checkbox-column { color: rgba(0, 0, 0, 0.54); } .md-column { color: rgba(0, 0, 0, 0.54); } .md-column md-icon.md-sort-icon { color: rgba(0, 0, 0, 0.38); } .md-column.md-active, .md-column.md-active md-icon { color: black; } .md-row-select tbody.md-body > tr.md-row:not([disabled]):hover { background-color: rgba(0, 0, 0, 0.04); } .md-row-select tbody.md-body > tr.md-row.md-selected { background-color: rgba(225, 245, 254, 0.12); } .md-table-pagination { color: rgba(0, 0, 0, 0.54); } .md-table-pagination md-select:not([disabled]):focus .md-select-value { color: rgba(0, 0, 0, 0.54); } md-edit-dialog { background-color: white; } md-edit-dialog > .md-content .md-title { color: rgba(0, 0, 0, 0.87); } md-edit-dialog > .md-content md-input-container .md-errors-spacer { color: rgba(0, 0, 0, 0.54); } .md-table-container { display: block; max-width: 100%; overflow-x: auto; -webkit-overflow-scrolling: touch; } table.md-table { width: 100%; border-spacing: 0; overflow: hidden; border-collapse: collapse; } table.md-table tr.md-row { border-bottom-style: solid; border-bottom-width: 1px; } table.md-table thead.md-head > tr.md-row { height: 56px; } table.md-table tbody.md-body > tr.md-row, table.md-table tfoot.md-foot > tr.md-row { height: 48px; } table.md-table thead.md-head + .md-table-progress md-progress-linear { top: -3px; } table.md-table .md-table-progress th { padding: 0; } table.md-table .md-table-progress th md-progress-linear { height: 0; transition: opacity 1s; } table.md-table .md-table-progress th md-progress-linear.ng-hide { opacity: 0; } table.md-table .md-table-progress th md-progress-linear > .md-container { height: 3px; top: 0; transition: none; } table.md-table .md-table-progress th md-progress-linear > .md-container > .md-bar { height: 3px; } table.md-table th.md-column { font-size: 12px; font-weight: bold; white-space: nowrap; } table.md-table th.md-column.md-sort { cursor: pointer; } table.md-table th.md-column md-icon { height: 16px; width: 16px; font-size: 16px !important; line-height: 16px !important; } table.md-table th.md-column md-icon.md-sort-icon { opacity: 0; transition: transform 0.25s, opacity 0.25s; } table.md-table th.md-column md-icon.md-sort-icon.md-asc { transform: rotate(0deg); } table.md-table th.md-column md-icon.md-sort-icon.md-desc { transform: rotate(180deg); } table.md-table th.md-column md-icon:not(:first-child) { margin-left: 8px; } table.md-table th.md-column md-icon:not(:last-child) { margin-right: 8px; } table.md-table th.md-column:hover md-icon.md-sort-icon, table.md-table th.md-column.md-active md-icon.md-sort-icon { opacity: 1; } table.md-table tr.md-row[ng\:repeat].ng-leave, table.md-table tr.md-row[ng-repeat].ng-leave, table.md-table tr.md-row[x-ng-repeat].ng-leave, table.md-table tr.md-row[data-ng-repeat].ng-leave { display: none; } table.md-table.md-row-select tbody.md-body > tr.md-row { transition: background-color 0.2s; } table.md-table.md-row-select td.md-cell:first-child, table.md-table.md-row-select th.md-column:first-child { width: 20px; padding: 0 0 0 24px; } table.md-table.md-row-select td.md-cell:nth-child(2), table.md-table.md-row-select th.md-column:nth-child(2) { padding: 0 24px; } table.md-table.md-row-select td.md-cell:nth-child(n+3):nth-last-child(n+2), table.md-table.md-row-select th.md-column:nth-child(n+3):nth-last-child(n+2) { padding: 0 56px 0 0; } table.md-table:not(.md-row-select) td.md-cell:first-child, table.md-table:not(.md-row-select) th.md-column:first-child { padding: 0 24px; } table.md-table:not(.md-row-select) td.md-cell:nth-child(n+2):nth-last-child(n+2), table.md-table:not(.md-row-select) th.md-column:nth-child(n+2):nth-last-child(n+2) { padding: 0 56px 0 0; } table.md-table td.md-cell, table.md-table th.md-column { vertical-align: middle; text-align: left; } table.md-table td.md-cell > *, table.md-table th.md-column > * { vertical-align: middle; } table.md-table td.md-cell:last-child, table.md-table th.md-column:last-child { padding: 0 24px 0 0; } table.md-table td.md-cell.md-clickable, table.md-table th.md-column.md-clickable { cursor: pointer; } table.md-table td.md-cell.md-clickable:focus, table.md-table th.md-column.md-clickable:focus { outline: none; } table.md-table td.md-cell.md-numeric, table.md-table th.md-column.md-numeric { text-align: right; } table.md-table td.md-checkbox-cell, table.md-table th.md-checkbox-column { width: 18px; font-size: 0 !important; } table.md-table td.md-checkbox-cell md-checkbox /deep/ .md-checkbox-inner-container, table.md-table th.md-checkbox-column md-checkbox /deep/ .md-checkbox-inner-container { width: 18px; height: 18px; margin: 0; } table.md-table td.md-cell { font-size: 13px; } table.md-table td.md-cell.md-numeric md-select { justify-content: flex-end; } table.md-table td.md-cell.md-numeric md-select .md-select-value { flex: 0 0 auto; } table.md-table td.md-cell md-select > .md-select-value > span.md-select-icon { justify-content: flex-end; width: 18px; text-align: right; } table.md-table td.md-cell md-select > .md-select-value > span.md-select-icon:after { transform: scaleY(0.4) scaleX(0.8); } md-card > md-toolbar.md-table-toolbar:first-child, md-card > md-table-container:first-child { border-top-left-radius: 2px; border-top-right-radius: 2px; } md-card > md-toolbar.md-table-toolbar:last-child, md-card > md-table-container:last-child { border-bottom-left-radius: 2px; border-bottom-right-radius: 2px; } .md-table-pagination md-select { justify-content: flex-end; min-width: 64px; } .md-table-pagination md-select .md-select-value { flex: 0 0 auto; } .md-table-pagination md-select .md-select-value span.md-select-icon { justify-content: center; text-align: center; margin-right: -6px !important; } .md-table-pagination md-select .md-select-value span.md-select-icon:after { top: initial; transform: scaleY(0.5) scaleX(1); } md-select.md-table-select { margin: 0; } md-select.md-table-select > .md-select-value { padding: 0; min-width: 0; min-height: 24px; border-bottom: 0 !important; } md-select.md-table-select > .md-select-value > span { display: block; height: auto; transform: none !important; } md-select.md-table-select > .md-select-value > span > .md-text { display: inherit; height: inherit; transform: inherit; } md-select.md-table-select > .md-select-value > span.md-select-icon { display: flex; align-items: center; height: 24px; margin: 0; } md-select.md-table-select > .md-select-value > span.md-select-icon:after { top: initial; } .md-select-menu-container.md-table-select, .md-select-menu-container.md-pagination-select { margin-left: -2px; border-radius: 2px; } .md-select-menu-container.md-table-select md-select-menu, .md-select-menu-container.md-table-select md-content, .md-select-menu-container.md-pagination-select md-select-menu, .md-select-menu-container.md-pagination-select md-content { border-radius: inherit; } .md-select-menu-container.md-table-select md-content, .md-select-menu-container.md-pagination-select md-content { padding: 0; } .md-select-menu-container.md-table-select .md-text { font-size: 13px; } .md-select-menu-container.md-pagination-select .md-text { font-size: 12px; } md-backdrop.md-edit-dialog-backdrop { z-index: 80; } md-edit-dialog { display: flex; flex-direction: column; position: fixed; z-index: 81; border-radius: 2px; cursor: default; } md-edit-dialog > .md-content { padding: 16px 24px 0; } md-edit-dialog > .md-content .md-title { margin-bottom: 8px; } md-edit-dialog > .md-content md-input-container { margin: 0; font-size: 13px; } md-edit-dialog > .md-content md-input-container input { float: none; } md-edit-dialog > .md-content md-input-container .md-errors-spacer { min-height: auto; min-width: auto; } md-edit-dialog > .md-content md-input-container .md-errors-spacer .md-char-counter { padding: 5px 2px 5px 0; } md-edit-dialog > .md-content md-input-container [ng-message] { padding: 5px 0 5px 2px; } md-edit-dialog > .md-actions { margin: 0 16px 8px; } md-edit-dialog > .md-actions .md-button { margin: 0; min-width: initial; } md-edit-dialog > .md-actions .md-button + .md-button { margin-left: 8px; } "],
            template: "<div layout=\"row\" layout-align=\"start center\" *ngIf=\"_title && !_searchVisible\"> <span class=\"md-subhead\">{{_title}}</span> <span flex></span> <button md-icon-button (click)=\"toggleSearch()\"> <md-icon *ngIf=\"_search\">filter_list</md-icon> </button> </div> <div layout=\"row\" layout-align=\"start center\" *ngIf=\"_searchVisible\"> <md-icon>search</md-icon> <form flex layout=\"row\" name=\"filter.form\"> <md-input flex #searchTerm id=\"search\" name=\"search\" type=\"text\" [formControl]=\"_searchTermControl\"> </md-input> </form> <button md-icon-button (click)=\"toggleSearch()\"> <md-icon>close</md-icon> </button> </div> <div class=\"md-table-container\" *ngIf=\"_visibleData.length > 0\" title> <table td-table [class.md-row-select]=\"_rowSelection\"> <thead td-head> <tr td-row> <th td-column class=\"md-checkbox-column\" *ngIf=\"_rowSelection\"> <md-checkbox *ngIf=\"_multiple\" [checked]=\"areAllSelected()\" (change)=\"selectAll($event.checked)\"> </md-checkbox> </th> <th td-column  *ngFor=\"let column of columns\"  [class.md-clickable]=\"_sorting\" [class.md-active]=\"_sorting && column === _sortBy\" [class.md-numeric]=\"column.numeric\" [class.md-asc]=\"(column === _sortBy && isAscending())\" [class.md-desc]=\"(column === _sortBy && isDescending())\"> <md-icon  class=\"md-sort-icon\"  *ngIf=\"_sorting && column.numeric\" [class.md-asc]=\"(!(column === _sortBy) || isAscending())\" [class.md-desc]=\"(column === _sortBy && isDescending())\" (click)=\"_sorting && setSorting(column)\"> arrow_upward </md-icon> <span class=\"md-caption\" (click)=\"_sorting && setSorting(column)\"> <span *ngIf=\"column.tooltip\" [md-tooltip]=\"column.tooltip\">{{column.label}}</span> <span *ngIf=\"!column.tooltip\">{{column.label}}</span> </span> <md-icon  class=\"md-sort-icon\"  *ngIf=\"_sorting && !column.numeric\" [class.md-asc]=\"(!(column === _sortBy) || isAscending())\" [class.md-desc]=\"(column === _sortBy && isDescending())\" (click)=\"_sorting && setSorting(column)\"> arrow_upward </md-icon> </th> </tr> </thead> <tbody td-body> <tr td-row [class.md-selected]=\"row[_rowSelectionField]\" *ngFor=\"let row of _visibleData\" (click)=\"_rowSelection && select(row, !row[_rowSelectionField], $event)\"> <td td-cell class=\"md-checkbox-cell\" *ngIf=\"_rowSelection\"> <md-checkbox [checked]=\"row[_rowSelectionField]\"> </md-checkbox> </td> <td td-cell [class.md-numeric]=\"column.numeric\" *ngFor=\"let column of columns\"> <span class=\"md-body-1\">{{ row[column.name] }}</span> </td> </tr> </tbody> </table> </div> <div class=\"md-body-1\" *ngIf=\"_visibleData.length < 1\"> No results </div> <div layout=\"row\" layout-align=\"end center\" class=\"md-caption md-table-pagination\" *ngIf=\"_pagination && hasData\"> <span> {{ _currentPage }} of {{ _totalPages }} </span> <button md-icon-button (click)=\"prevPage()\"> <md-icon *ngIf=\"_search\">keyboard_arrow_left</md-icon> </button> <button md-icon-button (click)=\"nextPage()\"> <md-icon *ngIf=\"_search\">keyboard_arrow_right</md-icon> </button> </div> <div class=\"md-body-1\" *ngIf=\"_pagination && !hasData\"> No pages </div>",
        }), 
        __metadata('design:paramtypes', [Renderer])
    ], TdDataTableComponent);
    return TdDataTableComponent;
}());

//# sourceMappingURL=data-table.component.js.map
